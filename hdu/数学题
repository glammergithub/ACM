1018/*用到了对数的性质int log（n）为位数*/
#include <iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<stdlib.h>
#include<cstring>
using namespace std;
int flag[100010];
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int x;
        scanf("%d",&x);
        double ans = 0.0;
        for(int i = 2; i <= x; i++)
            ans += log10(i);
        printf("%d\n",(int)ans + 1);
    }
    return 0;
}
1019/*用到了最小公倍数的性质，注意乘法会爆int，要用longlong*/
#include <iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<stdlib.h>
#include<cstring>
using namespace std;
typedef long long ll;
int gcd(ll x,ll y)
{
    if(y == 0)return x;
    return gcd(y,x % y);
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        ll m,a,b;
        scanf("%lld",&m);
        scanf("%lld",&a);
        for(int i = 1; i < m; i++)
        {
            scanf("%lld",&b);
            a = a * b / gcd(a,b);
        }
        printf("%lld\n",a);
    }
    return 0;
}
1021/*运用同余的性质，因为这个不断加法之后会爆longlong，所以只有不断取余数才行*/
#include <iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<stdlib.h>
#include<cstring>
using namespace std;
typedef long long ll;
ll fib[1000010];
int main()
{
    fib[0] = 7;
    fib[1] = 11;
    for(int i = 2; i <= 1000000; i++)
        fib[i] = (fib[i - 1] % 3 + fib[i - 2] % 3) % 3;
    int n;
    while(~scanf("%d",&n))
    {
        if(fib[n]  == 0)printf("yes\n");
        else printf("no\n");
    }
    return 0;
}

1030//给了一个三角图，只能沿着边走到相邻的三角形，问从一个三角形到另外一个三角形最短路径的长度是多少
分成三个方向，上下，沿着左斜线，沿着右斜线，注意到最右边的数是平方，利用这个数求出三个方向的相对长度，相加就行
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;
const int N = 1000000;
int a[N];
int main()
{
    int m,n;
    while(~scanf("%d%d",&m,&n))
    {

    int am = (int)ceil(sqrt(m));
    int an = (int)ceil(sqrt(n));
    int bm = (am * am - m) / 2 + 1;
    int bn = (an * an - n) / 2 + 1;
    int cm = (m - (am - 1) * (am - 1) - 1) / 2 + 1;
    int cn = (n - (an - 1) * (an - 1) - 1) / 2 + 1;
    printf("%d\n",(int)(fabs(am - an) + fabs(bm - bn) + fabs(cm - cn)));
    }
    return 0;
}

