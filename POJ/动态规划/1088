记忆化搜索相当于一棵树，每个节点向下有不同的分支，取分支最大的那个，然后走到末尾了加上根部的一个
#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
const int INF = 0x3f3f3f3f;
const int N = 110;
int mp[N][N],vis[N][N];
int len,MAX,n,m;
int dx[4] = {0,0,1,-1};
int dy[4] = {1,-1,0,0};
int dp[N][N];
int dfs(int x,int y)
{
    if(dp[x][y])return dp[x][y];
    for(int i = 0; i < 4; i++)
    {
        int xx = x + dx[i];
        int yy = y + dy[i];
        if(xx >= 1 && xx <= n && yy >= 1 && yy <= m )
        {
            if(mp[xx][yy] < mp[x][y])
            {
                dp[x][y] = max(dp[x][y],dfs(xx,yy));
            }
        }
    }
    dp[x][y] += 1;
    return dp[x][y];
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
        {
            scanf("%d",&mp[i][j]);
        }
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
        {
            memset(vis,0,sizeof(vis));
            dfs(i,j);
            //printf("%d\n",len);
        }
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            MAX = max(MAX,dp[i][j]);

    printf("%d\n",MAX);
    return 0;
}
