题意：给定一个长度不超过100的数字字符串（不含前导0），问如果移除了其中的若干位，会不会使得移除后的数能够整除8

方法：由于1000能够被8整除，所以超过1000的数只要考虑末三位就行，预处理0~999的所有能被8整除的数，按顺序暴力枚举三位，一位、两位、三位都要单独判断一下，保存结果
#include<cstdio>
#include<cstring>
using namespace std;
int mark[1100];
int main()
{
    char s[110];
    scanf("%s",s);
    int len = strlen(s);
    for(int i = 0; i < 1000; i++)
    {
        if(i % 8 == 0)
            mark[i] = 1;
    }
    int flag = 0,res;
    for(int i = 0; i < len; i++)
    {
        int a = s[i] - '0';
        if(a == 8)
        {
            flag = 1;
            res = 8;
            break;
        }
        else if(a == 0)
        {
            flag = 1;
            res = 0;
            break;
        }
        for(int j = i + 1; j < len; j++)
        {
            int b = s[j] - '0';
            if(b == 8)
            {
                flag = 1;
                res = 8;
                break;
            }
            else if(b == 0)
            {
                flag = 1;
                res = 0;
                break;
            }
            else if((a * 10 + b) % 8 == 0)
            {
                flag = 1;
                res = a * 10 + b;
                break;
            }
            for(int k = j + 1; k < len; k++)
            {
                int c = s[k] - '0';
                if((a * 10 + c) % 8 == 0)
                {
                    flag = 1;
                    res = a * 10 + c;
                    break;
                }
                else if((b * 10 + c) % 8 == 0)
                {
                    flag = 1;
                    res = b * 10 + c;
                    break;
                }
                else if((a * 100 + b * 10 + c) % 8 == 0)
                {
                    flag = 1;
                    res = a * 100 + b * 10 + c;
                    break;
                }
            }
            if(flag)
                break;
        }
        if(flag)
            break;
    }
    if(flag)
    {
        printf("%YES\n");
        printf("%d\n",res);
    }

    else
        printf("NO\n");
    return 0;
}

D
题意：一个每个结点度都为k的图，其中一条边除去后分成两部分，构造出这个图
思路：中间一条边，两边对称，构造一边，对于构造边的结点，还剩k-1个度，需要k-1个点，但是这k-1个点又不能保证度为k,所以又增加了一个点，新增的点要与这
k-1个点相连，但是不能和构造边的结点连，所以不能满足度为k，再增加一个结点，让这新增的两个结点相互连接，剩下的k-1个点保证有k-3个度即可
注意k为偶数的时候不能k-1个点不能产生k-3个度，所以舍去。
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int k;
    cin>>k;
    if(k == 1)
    {
        printf("YES\n2 1\n1 2\n");
    }
    else if(!(k % 2)){//画图发现k-1个点相连保证k-3个度，必须要k为奇数
        printf("NO\n");
    }
    else{
            printf("YES\n");
        int n = k + 2;
        printf("%d %d\n",n * 2,n * k);
        printf("%d %d\n",n,n * 2);//桥
        printf("%d %d\n",n - 1,n - 2);//新加的两个点
        printf("%d %d\n",2 * n - 1,2 * n - 2);//对称
        for(int i = 1; i <= n - 3; i++)//k-1个点与新增的两个点以及构建桥的点连
        {
            printf("%d %d\n",i,n);
            printf("%d %d\n",i,n - 1);
            printf("%d %d\n",i,n - 2);
            printf("%d %d\n",n + i,2 * n);
            printf("%d %d\n",n + i,2 * n - 1);
            printf("%d %d\n",n + i,2 * n - 2);
        }
        for(int i = 1; i <= n - 3; i++)//k-1个点相互连，保证k-3个度
        {
            if(i % 2){//奇数个后面少了一个，前面是偶数没少
                for(int j = i + 2; j <= n - 3; j++)
                {
                    printf("%d %d\n",i,j);
                    printf("%d %d\n",n + i,n + j);
                }
            }
            else{//偶数个后面的都有，前面是奇数，的少了一个
                for(int j = i + 1; j <= n - 3; j++)
                {
                    printf("%d %d\n",i,j);
                    printf("%d %d\n",n + i,n + j);
                }
            }
        }
    }
    return 0;
}
题意：给了你0 1的序列和四种->的规则，问能否通过加入->和()使得最后结果为0

分析：由于只有1->0才为0，所以最后一个数一定是0。前面的数如果是1，结果也一定为0，因为无论0还是1指向1都是1。前面的数如果是0，在这个0之前找最近的一个0
，因为0->1=1，所以这之间的1运算完还是1，可以把它们看成一个整体，不断加括号就可以实现。而这个整体1之前无论是0还是1运算完都是1，所以一定能构造出来。
但是如果之前没有0了，就不能构造。
#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
int a[maxn],s;
int n;
bool fun()
{
    for(int i = n - 2; i >= 1; i--)
    {
        if(a[i] == 0)
        {
            s = i;
            return true;
        }
    }
    return false;
}
int main()
{
    cin>>n;
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    if(n == 1 && a[n] == 0)
    {
        printf("YES\n0\n");
    }
    else if(a[n] == 1)
        puts("NO");
    else
    {
        if(a[n - 1] == 1)
        {
            puts("YES");
            int first = 0;
            for(int i = 1; i <= n; i++)
            {
                if(first)printf("->%d",a[i]);
                else
                {
                    first = 1;
                    printf("%d",a[i]);
                }
            }
            printf("\n");
        }
        else
        {
            if(fun())
            {
                puts("YES");
                int first = 0;
                for(int i = 1; i <= n; i++)
                {
                    if(first)printf("->");
                    else first = 1;
                    if(s == i)
                    {
                        printf("(%d",a[i]);
                       for(int j = i + 1; j <= n - 1; j++)
                            printf("->(%d",a[j]);
                       for(; i <= n - 1; i++)
                        printf(")");
                        i--;
                    }
                    else printf("%d",a[i]);
                }
            }
            else
                puts("NO");
        }
    }
    return 0;
}
