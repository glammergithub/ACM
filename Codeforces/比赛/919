A 傻瓜错误，没有认真检查代码...
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    double res = 1000000.0,ans;
    while(n--)
    {
        double a,b;
        scanf("%lf%lf",&a,&b);
        ans = a / b;
        res = min(res,ans);
    }
     printf("%.10f\n",res * (double)m);
    return 0;
}
B //比赛的时候一个思路卡死了，浪费了不少时间，下面这个是傻瓜做法，直接往后面找反正也就是10000
#include<bits/stdc++.h>
using namespace std;
int judge(int x)
{
    int sum = 0;
    while(x)
    {
        sum += x % 10;
        x /= 10;
    }
    if(sum == 10)return 1;
    else return 0;
}
int main()
{
    int n;
    scanf("%d",&n);
    int cnt = 0;
    for(int i = 19; ; i++)
    {
        if(judge(i))
        {
            cnt++;
            if(cnt == n)
            {
                printf("%d\n",i);
                break;
            }
        }

    }

    return 0;
}
C 这道题坑点在于k=1的情况，还有直接每个点找会超时，直接找连续出现的'.'的个数就行
#include<bits/stdc++.h>
using namespace std;
int n,m,k;
char s[2010][2010];
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for(int i = 0; i < n; i++)
        scanf("%s",s[i]);
    int cnt = 0,flag;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j = flag)
        {
           flag = j;
           while(flag < m && s[i][flag] == '.')
            flag++;
           if(flag == m)
           {
               int ans = flag - j - k + 1;
               if(ans > 0)cnt+= ans;
           }
           else
           {
               int ans = flag - j - k + 1;
               if(ans > 0)cnt+= ans;
           }
           flag++;
        }
    }
    for(int j = 0; j < m; j++)
    {
        for(int i = 0; i < n; i = flag)
        {
           flag = i;
           while(flag < n && s[flag][j] == '.')
            flag++;
           if(flag == n)
           {
               int ans = flag - i - k + 1;
               if(ans > 0)cnt+= ans;
           }
           else
           {
               int ans = flag - i - k + 1;
               if(ans > 0)cnt+= ans;
           }
           flag++;
        }

    }
    int ans = 0;
    if(k == 1)
    {

        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
        {
            if(s[i][j] == '.')
                ans++;
        }
    }
    if(k == 1)printf("%d\n",ans);
    else
    printf("%d\n",cnt);
    return 0;
}

D 题意就是给了一个有向图，判断一条路径上出现次数相同字母出现次数最多的个数
先拓扑排序判断是否有环，然后deg[i]维护第i个点是否使用过，f[i][j]表示到第i个点之前所有的路径中出现字母为j的最大值，从后往前找因为这样保证这条路是走完的
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<vector>
#include<string>
#include<queue>
using namespace std;
const int maxn = 3e5 + 10;
const double pi = acos(-1.0);
typedef long long ll;
char str[maxn];
vector<int>vec[maxn];
vector<int>g[maxn];
int f[maxn][26],deg[maxn],in[maxn];
queue<int>que;
int n,m;
int tuopu()
{
	for(int i = 1; i <= n; i++)if(!in[i])que.push(i);//找入度为0的点 
	while(!que.empty())
	{
		int k = que.front();
		que.pop();
		for(int i = 0; i < g[k].size(); i++)//找入度为0的点，它所指向的点的入度减去1 
		{
			in[g[k][i]]--;
			if(in[g[k][i]] == 0)que.push(g[k][i]);//把入度为0的点再次压进队列 
		}
	}
	for(int i = 1; i <= n; i++)if(in[i])return 1;//如果还有入度不是0的点就说明有环
	return 0;//反之没有环 
}
void dfs(int x)
{
	deg[x] = 1;
	for(int i = 0; i < vec[x].size(); i++)
	{
		if(!deg[vec[x][i]])dfs(vec[x][i]);
		for(int j = 0; j < 26; j++)
		    f[x][j] = max(f[x][j],f[vec[x][i]][j]);
	}
	f[x][str[x] - 'a']++;
}
int main()
{
    scanf("%d%d",&n,&m);
    scanf("%s",str + 1);
    while(m--)
    {
    	int a,b;
    	scanf("%d%d",&a,&b);
    	vec[b].push_back(a);
    	in[b]++;
    	g[a].push_back(b);
	}
	if(tuopu())
	{
		printf("-1\n");
		return 0;
	}
	memset(f,0,sizeof(f));
	memset(deg,0,sizeof(deg));
	for(int i = 1; i <= n; i++)
	{
		if(!deg[i])dfs(i);
	}
	int maxnum = 0;
	for(int i = 1; i <= n; i++)
	    for(int j = 0; j < 26; j++)
	    {
	    	maxnum = max(maxnum,f[i][j]);
		}
		printf("%d\n",maxnum);
	return 0;
}
E不会...
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
ll a,b,p,x;
int main()
{
    cin>>a>>b>>p>>x;
    ll ans=0,r=b,t,t1;
    for(int i=p-1; i; i--)
    {
        if(i<=x)
        {
            t=(i-r+p)%p,t1=(x-i)/(p-1);
            ans+=t1/p+(t1%p>=t);
        }
        r=r*a%p;
    }
    cout<<ans;
}
