C
#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
vector<int>G[maxn];
int ans[maxn],vis[maxn];
int dfs(int x)
{
    for(int i = 0; i < G[x].size(); i++)
    {
        int u = G[x][i];
        if(!vis[u])
        {
            vis[u] = 1;
            ans[x] += dfs(u);
            vis[u] = 0;
        }
    }
    ans[x]++;
    return ans[x];
}
int main()
{
    int n;
    cin>>n;
    for(int i = 1; i <= n - 1; i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        G[u].push_back(v);
        G[v].push_back(u);
    }
    vis[1] = 1;
    dfs(1);
//    for(int i = 1; i <= n; i++)
//        printf("%d ",ans[i]);
//    printf("\n");
    if(n % 2)
        printf("-1\n");
    else
    {
        int cnt = 0;
        for(int i = 1; i <= n; i++)
        {
            if(ans[i] % 2 == 0)
                cnt++;
        }
        cout<<cnt - 1<<endl;
    }

    return 0;
}
D
#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
struct node
{
    int v,id;
}nod[maxn];
int tot;
bool cmp(node a,node b)
{
    return a.v < b.v;
}
int cnt[maxn],pre[maxn],mark[maxn],a[maxn];
void init(int n)
{
    for(int i = 1; i <= n; i++)
        pre[i] = i;
}
int findd(int x)
{
    if(pre[x] == x)
        return x;
    else return pre[x] = findd(pre[x]);
}
void uni(int x,int y)
{
    int u = findd(x);
    int v = findd(y);
    if(u != v)
    {
        cnt[mark[u]]--;
        cnt[mark[v]]--;
        pre[u] = v;
        mark[v] += mark[u];
        cnt[mark[v]]++;
        tot--;
    }

}
int main()
{
    int n;
    cin>>n;
    init(n);
    for(int i = 1; i <= n; i++)
    {
        scanf("%d",&nod[i].v);
        a[i] = nod[i].v;
        nod[i].id = i;
    }
    sort(nod + 1,nod + n + 1,cmp);
    int ans = 0,res;
    for(int i = 1; i <= n; i++)
    {
        int id = nod[i].id;
        tot++;//岛的数量
        mark[id] = 1;//当前岛所在树的天数
        cnt[1]++;//天数为x的岛的数量
        if(id > 1 && a[id] > a[id - 1])//如果之前被赋值了说明一定是比当前数小，合并
            uni(id,id - 1);
        if(id < n && a[id] > a[id + 1])
            uni(id,id + 1);
        if(tot == cnt[mark[findd(id)]] && tot > ans)//k-1的数量和合并的数量相同，小的一定可以，主要贪大的
        {
            ans = tot;
            res = a[id];
        }
    }
    printf("%d\n",res + 1);
    return 0;
}
