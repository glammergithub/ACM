A
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,k;
    cin>>n>>k;
    while(k--)
    {
        if((n % 10) != 0)
            n--;
        else n /= 10;
    }
    printf("%d\n",n);
    return 0;
}
B
暴力匹配...
#include<bits/stdc++.h>
using namespace std;
typedef pair<char,char>pa;

int res[110];
int f[1100];
int main()
{
    int n;
    cin>>n;
    char s[110];
    scanf("%s",s);
    int len = strlen(s);
    int maxx = 0;
    for(int i = 0; i < len - 1; i++)
        for(int j = i + 1; j < len - 1; j++)
    {
        if(i == len - 2)break;
        if((s[i] == s[j]) && (s[i + 1] == s[j + 1]))
           {
               res[i]++;
               res[j]++;
           }
    }
    int j;
   for(int i = 0; i < len - 1; i++)
   {
       if(res[i] > maxx)
        maxx = res[i],j = i;
   }
   printf("%c%c\n",s[j],s[j + 1]);
    return 0;
}
C
找连续的数，注意特判0
#include<bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
int a[maxn];
int main()
{
    int n,k;
    cin>>n>>k;
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    sort(a + 1,a + n + 1);
    int cnt = 0;
    int ss = 0,res;
    if(k == 0)
    {
        int flag = 1;
        for(int i = 1; i <= n; i++)
        {
            if(a[i] == 1)
                {
                    flag = 0;
                    break;
                }
        }
        if(flag)printf("1\n");
        else printf("-1\n");
        return 0;
    }
    for(int i = 1; i <= n; i++)
    {
        int flag = i,x;
        while((flag + 1) <= n && (a[flag + 1] == a[flag]))
        {
            flag++;
        }
        x = flag + 1 - i;
       // printf("%d %d\n",x,flag);
        if(cnt + x < k)
        {
            cnt = cnt + x;
        }
        else if((cnt + x) == k)
        {
            ss = 1;
            res = flag;
            //printf("%d\n",a[i]);
            break;
        }
        else if((cnt + x) > k)
        {
            ss = 0;
            break;
        }
        i = flag;
    }
   if(ss)
   {
       printf("%d\n",a[res]);
   }
   else printf("-1\n");
    return 0;
}
D
DFS暴力搜索找符合条件的
#include<bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
typedef long long ll;
ll a[110];
int flag[110];
ll res[110];
int n,mark,cnt;
void dfs(int x)
{
    if(mark)
        return;
    if(cnt >= n)
    {
        res[cnt] = a[x];
        mark = 1;
        return;
    }
    for(int i = 1; i <= n; i++)
    {

        if(!flag[i] && (i != x))
        {
           if((a[x] == a[i] * 3) || (a[i] == a[x] * 2))
           {
               flag[x] = 1;
               res[cnt++] = a[x];
               dfs(i);
               if(!mark)
               {
                  flag[x] = 0;
               cnt--;
               res[cnt] = 0;
               }

           }
        }

    }
}
int main()
{
    cin>>n;
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    for(int i = 1; i <= n; i++)
    {
        mark = 0;
        cnt = 1;
        memset(flag,0,sizeof(flag));
        dfs(i);
        if(mark)
            break;
    }
    for(int i = 1; i <= n; i++)
    {
        if(i == 1)
            printf("%I64d",res[i]);
        else printf(" %I64d",res[i]);
    }
        printf("\n");
    return 0;
}
E
找只有一个环的连通图，就是找一个度仅有2的连通图，遇到度不为2的dfs标记，遇到度为2的计数再标记一下
#include<bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
typedef long long ll;
vector<int>g[maxn];
int flag[maxn];
void mark(int x)
{
    if(flag[x])return;
    flag[x] = 1;
    for(int i = 0; i < g[x].size(); i++)
    {
        int c = g[x][i];
        mark(c);
    }
}
void dfs(int x)
{
    if(flag[x])return;
    flag[x] = 1;
    for(int i = 0; i < g[x].size(); i++)
        dfs(g[x][i]);
}
int main()
{
    int n,m;
    cin>>n>>m;
    for(int i = 1; i <= m; i++)
    {
        int a,b;
        cin>>a>>b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for(int i = 1; i <= n; i++)
    {
        if(g[i].size() != 2)
        {
            mark(i);
        }
    }
    int cnt = 0;
    for(int i = 1; i <= n; i++)
    {
        if(!flag[i])
        {
            cnt++;
            dfs(i);
        }
    }
    cout<<cnt<<endl;
    return 0;
}
F
找连续最长上升子序列，就是利用map存储到当前数的连续最长的子序列长度，然后找到位置输出即可
#include<bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 10;
map<int,int>mp;
int a[maxn];
int main()
{
    int n;
    cin>>n;
    for(int i = 1; i <= n; i++)
    {
        int x;
        cin>>x;
        a[i] = x;
        mp[x] = mp[x - 1] + 1;
    }
    map<int,int>::iterator it;
    int maxx = 0,pos;
    for(it = mp.begin();it != mp.end(); it++)
    {
        if(it->second > maxx)
        {
            maxx = it->second;
            pos = it->first;
        }
    }
    pos = pos - maxx + 1;
    printf("%d\n",maxx);
    for(int i = 1; i <= n; i++)
    {
        if(a[i] == pos)
        {
            printf("%d ",i);
            pos++;
        }
    }
    printf("\n");
    return 0;

}
