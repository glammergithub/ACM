
  
777A
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 2e5 * 6 + 10;
int dp[N];
int main()
{
    int n,a;
    scanf("%d%d",&n,&a);
    n = n % 6;
    if(n == 1)
    {
        if(a == 0)
            printf("1\n");
        if(a == 1)
            printf("0\n");
        if(a == 2)
            printf("2\n");
    }
    if(n == 2)
    {
        if(a == 0)
            printf("1\n");
        if(a == 1)
            printf("2\n");
        if(a == 2)
            printf("0\n");
    }
    if(n == 3)
    {
        if(a == 0)
            printf("2\n");
        if(a == 1)
            printf("1\n");
        if(a == 2)
            printf("0\n");
    }
    if(n == 4)
    {
        if(a == 0)
            printf("2\n");
        if(a == 1)
            printf("0\n");
        if(a == 2)
            printf("1\n");
    }
    if(n == 5)
    {
        if(a == 0)
            printf("0\n");
        if(a == 1)
            printf("2\n");
        if(a == 2)
            printf("1\n");
    }
    if(n == 0)
    {
        if(a == 0)
            printf("0\n");
        if(a == 1)
            printf("1\n");
        if(a == 2)
            printf("2\n");
    }
    return 0;
}
777 B
/*第一种情况尽量让相等的满足，第二种情况让稍微大一点的去满足*/
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 1010;
int a[N],b[N];
char s1[N],s2[N];
int main()
{
    int n;
    scanf("%d",&n);
    scanf("%s",s1);
    for(int i = 1; i <= n; i++)
    {
        a[i] = s1[i - 1] - '0';
    }
    scanf("%s",s2);
    for(int i = 1; i <= n; i++)
    {
        b[i] = s2[i - 1] - '0';
    }
    int res1 = 0, res2 = 0,j;
    j = 1;
    sort(a + 1, a + n + 1);
    sort(b + 1, b + n + 1);
    for(int i = 1; i <= n; i++)
    {

        while(j <= n && b[j] < a[i])
        {
            j++;
        }
        if(j <= n)
        {
            j++;
        }
        else
            res1++;
    }
    j = 1;
    for(int i = 1; i <= n; i++)
    {
        while(j <= n && b[j] <= a[i])
        {
            j++;
        }
        if(j <= n)
        {
            res2++;
            j++;
        }
    }
    printf("%d\n%d\n",res1,res2);
    return 0;
}

777C
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
using namespace std;
const int N = 100010;
vector<int>vec[N];
int res[N];
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            int x;
            scanf("%d",&x);
            vec[i].push_back(x);
        }
    }
    memset(res,0,sizeof(res));
    for(int j = 0; j < m; j++)
    {
       for(int i = 0; i < n; )
       {
           int flag = i;
           while(flag + 1 < n && vec[flag][j] <= vec[flag + 1][j])
           {
               flag++;
           }
           for(int k = i; k <= flag; k++)
               res[k] = max(res[k],flag);
           i = flag + 1;
       }
    }
//        for(int i = 0; i < n; i++)
//            printf("%d\n",res[i]);
    int q;
    scanf("%d",&q);
    while(q--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        l--;
        r--;
        if(res[l] >= r)
            printf("Yes\n");
        else
            printf("No\n");
    }
    return 0;
}
777D
//注意vec分装的是字符串，一个vector即可，还有在使用第一行语句的时候注意全部要用cin/cout,为了快一点cout输出"\n"
#include <iostream>
#include<cstdio>
#include <cstring>
#include <cstdlib>//定义杂项函数及内存分配函数
#include <cmath>
#include <string>//c++中的string类 不能用strcpy等c函数去操作
#include <vector>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include<set>
#include <bitset>//bitset可按位定义串//比如：bitset <1000> all;定义一个1000位的串
#include <algorithm>//swap sort merge max min
#include <numeric>//常用数字操作 一般和algorithm搭配使用
#include <functional>//STL定义运算函数（代替运算符）
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
const long long INFLL  = 0x3f3f3f3f3f3f3f3fLL;
const int N = 5e5 + 10;
using namespace std;
int max3(int x,int y,int z)
{
    if(x > y)return x > z ? x : z;
    else return y > z ? y : z;
}
int min3(int x,int y,int z)
{
    if(x < y)return x < z ? x : z;
    else return y < z ? y : z;
}
struct Node
{
    ll val,id;
    bool operator <(const Node &a)const
    {
        return val < a.val;
    }
}A[N];
vector<string>vec;//整个vector分装的是字符串不是多个vecotr
int main()
{
    ios::sync_with_stdio(false);
    int n;
    cin>>n;
    for(int i = 0; i < n; i++)
    {
        string s;
        cin>>s;
        vec.push_back(s);
    }
//    for(int i = 0; i < n; i++)
//    {
//        for(int j = 0; j < vec[i].size(); j++)
//            cout<<vec[i][j];
//        cout<<endl;
//    }

    for(int i = n - 2; i >= 0; i--)
    {
        if(vec[i] > vec[i + 1])
        {
            int mark = 0;
            for(int j = 0; j < (int)vec[i].size() && j < (int)vec[i + 1].size(); j++)
        {
            if(vec[i][j] > vec[i + 1][j])
            {
                //cout<<vec[i][j]<<" "<<vec[i + 1][j]<<endl;
                mark = 1;
                vec[i][j] = '\0';
                break;
            }
        }
        if(!mark)
            vec[i][(int)vec[i + 1].size()] = '\0';
        }
    }
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < (int)vec[i].size() ; j++)
        {
            if(vec[i][j] == '\0')
                break;
            cout<<vec[i][j];
        }
            cout<<endl;
    }
    return 0;
}
777E
/*贪心策略，外径大的内径大的放在下面，排序时注意如果相同外径从先遇到
内径小的比大的好，如果不同外径就从大到小的顺序排，如果当前不满足的话，那么它上面的
外径小于等于该原盘外径也不满足*/
#include <iostream>
#include<cstdio>
#include <cstring>
#include <cstdlib>//定义杂项函数及内存分配函数
#include <cmath>
#include <string>//c++中的string类 不能用strcpy等c函数去操作
#include <vector>
#include <list>
#include <map>
#include <queue>
#include <stack>
#include<set>
#include <bitset>//bitset可按位定义串//比如：bitset <1000> all;定义一个1000位的串
#include <algorithm>//swap sort merge max min
#include <numeric>//常用数字操作 一般和algorithm搭配使用
#include <functional>//STL定义运算函数（代替运算符）
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
const long long INFLL  = 0x3f3f3f3f3f3f3f3fLL;
const int N = 100010;
using namespace std;
int max3(int x,int y,int z)
{
    if(x > y)return x > z ? x : z;
    else return y > z ? y : z;
}
int min3(int x,int y,int z)
{
    if(x < y)return x < z ? x : z;
    else return y < z ? y : z;
}
struct s
{
    ll val,id;
    bool operator <(const s &a)const
    {
        return val < a.val;
    }
}A[N];
struct Node
{
    ll a,b,h;
}node[N];
int cmp(Node a,Node b)
{
    if(a.b != b.b)
    return a.b > b.b;
    return a.a > b.a;
}
int main()
{
    int n;
    scanf("%d",&n);
    for(int i = 0; i < n; i++)
        scanf("%I64d%I64d%I64d",&node[i].a,&node[i].b,&node[i].h);
    sort(node,node + n,cmp);
    stack<Node>st;
    ll res = node[0].h,sum = node[0].h;
    st.push(node[0]);
    for(int i = 1; i < n ; i++)
    {
        while(!st.empty() && node[i].b <= st.top().a)
        {
            sum -= st.top().h;
            st.pop();
        }
        sum += node[i].h;
        st.push(node[i]);
        res = max(res,sum);
    }
    printf("%I64d\n",res);
    return 0;
}
