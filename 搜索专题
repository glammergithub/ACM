/****搜索专题******/

//hdu2181
/*
#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
int mp[110][110];
int tar,cnt,num;
int flag[30];
vector<int>vec;
void dfs(int x)
{
    if(cnt == 20 && x == tar)
    {
        printf("%d:  %d",num++,tar);
        for(int i = 0; i < vec.size();i++)
            printf(" %d",vec[i]);
        printf("\n");
        return;
    }
    for(int i = 1; i <= 20; i++)
    {
        if(!flag[i] && mp[x][i])
        {
            flag[i] = 1;
            cnt++;
            vec.push_back(i);
            dfs(i);
            flag[i] = 0;
            cnt--;
            vec.pop_back();
        }
    }
    return;
}
int main()
{
    for(int i = 1; i <= 20; i++)
    {
        int x,y,z;
        cin>>x>>y>>z;
        mp[i][x] = 1;
        mp[x][i] = 1;
        mp[i][y] = 1;
        mp[y][i] = 1;
        mp[i][z] = 1;
        mp[z][i] = 1;
    }
    int m;
    while(scanf("%d",&m) && m)
    {
        tar = m;
        cnt = 0;
        num = 1;
        dfs(m);
    }

    return 0;
}
*/
/* 
POJ3126
#include<cstdio>
#include<cmath>
#include<queue>
#include<iostream>
#include<cstring>
using namespace std;
struct node
{
   int val,res;	
};
queue<node>Q;
int st,ed;
const int maxn = 1e5 + 10;
int flag[maxn];
int judge(int x)
{
	for(int i = 2; i <= sqrt(x); i++)
	{
		if(x % i == 0)
		{
			return 0;
		}
	}
	return 1;
}
int bfs()
{
	node a;
	a.res = 0;
	a.val = st;
	Q.push(a);
	int ans = -1; 
	while(!Q.empty())
	{
	//	printf("1\n");
		node top = Q.front();
		if(top.val == ed)
		{
		//	printf("1\n");
		  	ans = top.res;
		  	break;
		} 
		Q.pop();
		for(int i = 1; i <= 9; i += 2)//个位
		{
			int x = top.val / 10 * 10 + i;
			if(!flag[x] && judge(x))
			{
				flag[x] = 1;
				node tmp;
				tmp.res = top.res + 1;
				tmp.val = x;
			   	Q.push(tmp);
			}
		} 
		for(int i = 0; i <= 9; i++)
		{
			int x = top.val / 100 * 100 + i * 10 + top.val % 10;
			if(!flag[x] && judge(x))
			{
				flag[x] = 1;
				node tmp ;
				tmp.res = top.res + 1;
				tmp.val = x;
				Q.push(tmp);
			}
		}
		for(int i = 0; i <= 9; i++)
		{
			int x = top.val / 1000 * 1000 + i * 100 + top.val % 100;
			if(!flag[x] && judge(x))
			{
				flag[x] = 1;
				node tmp ;
				tmp.res = top.res + 1;
				tmp.val = x;
				Q.push(tmp);
			}
		}
		for(int i = 1; i <= 9; i++)
		{
			int x = i * 1000 + top.val % 1000;
			if(!flag[x] && judge(x))
			{
				flag[x] = 1;
				node tmp ;
				tmp.res = top.res + 1;
				tmp.val = x;
				Q.push(tmp);
			}
		}
	}
	return ans;
}
int main()
{
	int n;
	cin>>n;
	
	for(int i = 1; i <= n; i++)
	{
		scanf("%d%d",&st,&ed);
		memset(flag,0,sizeof(flag));
		flag[st] = 1;
	    while(!Q.empty())
	       Q.pop();
		int ans = bfs();
		if(ans == -1)printf("Impossible\n");
		else printf("%d\n",ans);
	}
	return 0;
}
*/
/*
POJ1321
#include<cstdio>
#include<cmath>
#include<queue>
#include<iostream>
#include<cstring>
using namespace std;
char s[15][15];
int n,m;
int res,num;
int vis[15];
void dfs(int k)
{
	if(num == m)
	{
		res++;
		return;
	}
	if(k >= n)return;
    for(int i = 0; i < n; i++)
    {
    	if(s[k][i] == '#' && !vis[i])
    	{
    		vis[i] = 1;
    		num++;
    		dfs(k + 1);//第k行第i列放 
    		vis[i] = 0;
    		num--;
		}
	} 
	dfs(k + 1);//第k行不放棋子 
}
int main()
{
	while(~scanf("%d%d",&n,&m))
	{
		if(n == -1 && m == -1)
		   break;
		for(int i = 0; i < n; i++)
		   scanf("%s",s[i]);
		res = 0;
		dfs(0);
		printf("%d\n",res);
	} 
	return 0;
}
*/
/*
NYOJ 722
#include<cstdio>
#include<cmath>
#include<queue>
#include<iostream>
#include<cstring>
#include<vector>
using namespace std;
const int maxn = 20;
int mp[maxn][maxn];
int r[maxn][maxn],c[maxn][maxn],tab[maxn][maxn][maxn];
int flag = 0;
void dfs(int n)
{
	int x = n / 9;
	int y = n % 9;
	if(flag)
	   return;
	if(n == 81)
	{
		for(int i = 0; i < 9; i++)
		{
			for(int j = 0; j < 9; j++)
			{
				if(!j)
				printf("%d",mp[i][j]);
				else printf(" %d",mp[i][j]);
			}
			printf("\n");
		}
		flag = 1;
		return;
	}
	if(mp[x][y] == 0)
	{
		for(int i = 1; i <= 9; i++)
		{
			//printf("%d %d %d\n",r[x][i],c[y][i],tab[x / 3][y / 3]);
			if(!r[x][i] && !c[y][i] && !tab[x / 3][y / 3][i])
			{
				mp[x][y] = i;
				r[x][i] = c[y][i] = tab[x / 3][y / 3][i] = 1;
				dfs(n + 1);
				mp[x][y] = 0;
				r[x][i] = c[y][i] = tab[x / 3][y / 3][i] = 0;
			}	
		}
	}
	else 
	{
		dfs(n + 1);
	}
}
int main()
{
	int n;
	cin>>n;
	while(n--)
	{
		memset(r,0,sizeof(r));
		memset(c,0,sizeof(c));
		memset(tab,0,sizeof(tab));
		for(int i = 0; i < 9; i++)
	{
		for(int j = 0; j < 9; j++)
		{
			scanf("%d",&mp[i][j]);
			if(mp[i][j] != 0)
			{
				r[i][mp[i][j]] = 1;
			    c[j][mp[i][j]] = 1;
			    tab[i / 3][j / 3][mp[i][j]] = 1;
			}
		}
	}
	    flag = 0;
	    dfs(0);
		
	}
	
	
	return 0;
}
*/
/*
POJ3414 POT
#include<cstdio>
#include<iostream>
#include<queue>
using namespace std;
struct node
{
    int vi,vj;
    int step;
};
struct pre
{
    int vi,vj;
    int op;
}pre[110][110];
char s[6][10] = {"FILL(1)","FILL(2)","DROP(1)","DROP(2)","POUR(1,2)","POUR(2,1)"};
int vis[110][110];
int A,B,C;
queue<node>Q;
void print(int a,int b)
{
    if(!a && !b)
        return;
    else
    {
        print(pre[a][b].vi,pre[a][b].vj);
        printf("%s\n",s[pre[a][b].op]);
    }
}
void bfs()
{
    node tmp;
    tmp.vi = tmp.vj = tmp.step = 0;
    Q.push(tmp);
    vis[0][0] = 1;
    while(!Q.empty())
    {
        node top = Q.front();
        Q.pop();
        if(top.vi == C || top.vj == C)
        {
            printf("%d\n",top.step);
            print(top.vi,top.vj);
            return;
        }
        int va,vb;
        node tmp;
        for(int i = 0; i < 6; i++)
        {
            if(!i)
            {
                va = A;
                vb = top.vj;
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
            else if(i == 1)
            {
                va = top.vi;
                vb = B;
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
            else if(i == 2)
            {
                va = 0;
                vb = top.vj;
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
            else if(i == 3)
            {
                va = top.vi;
                vb = 0;
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
            else if(i == 4 && top.vj != B && top.vi)
            {
                if(top.vi + top.vj > B)
                {
                    va = top.vi - (B - top.vj);
                    vb = B;
                }
                else
                {
                    vb = top.vi + top.vj;
                    va = 0;
                }
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
            else if(i == 5 && top.vi != A && top.vj)
            {
               if(top.vi + top.vj > A)
               {
                   vb = top.vj - (A - top.vi);
                   va = A;
               }
               else
               {
                   va = top.vi + top.vj;
                   vb = 0;
               }
                if(vis[va][vb])continue;
                vis[va][vb] = 1;
                tmp.step = top.step + 1;
                tmp.vi = va;tmp.vj = vb;

                pre[va][vb].vi = top.vi;
                pre[va][vb].vj = top.vj;
                pre[va][vb].op = i;
                Q.push(tmp);
            }
        }
    }
    printf("impossible\n");
}
int main()
{

    cin>>A>>B>>C;
    bfs();
    return 0;
}
*/
/*
hdu3345
#include<bits/stdc++.h>
using namespace std;
struct node
{
    int x,y,mv;
    node(int x = 0,int y = 0,int mv = 0):x(x),y(y),mv(mv){}
    bool operator < (const node &x)const
    {
        return mv < x.mv;
    }
};
int n,m,mv,stx,sty;
char s[110][110];
priority_queue<node>PQ;
int dir[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
int vis[110][110];
bool check(int x,int y)
{
    if(x + 1 < n)
    {
        if(s[x + 1][y] == 'E')
            return true;
    }
    if(x - 1 >= 0)
    {
        if(s[x - 1][y] == 'E')
            return true;
    }
    if(y + 1 < m)
    {
        if(s[x][y + 1] == 'E')
            return true;
    }
    if(y - 1 >= 0)
    {
        if(s[x][y - 1] == 'E')
            return true;
    }
    return false;
}

void bfs()
{
    while(!PQ.empty())
        PQ.pop();
    memset(vis,0,sizeof(vis));
    node tmp;
    tmp.x = stx;tmp.y = sty;tmp.mv = mv;
    PQ.push(tmp);
    vis[stx][sty] = 1;
    while(!PQ.empty())
    {
        node f = PQ.top();
        PQ.pop();
        int x = f.x;
        int y = f.y;
        for(int i = 0; i < 4; i++)
        {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            if(xx >= 0 && xx < n && yy >= 0 && yy < m && !vis[xx][yy] &&  s[xx][yy] != '#'  && f.mv > 0)
            {
               // printf("%d %d\n",xx,yy);
                if(s[xx][yy] == 'P' || s[xx][yy] == '.')
                {
                    vis[xx][yy] = 1;
                    node tmp;
                    if(check(xx,yy))
                        tmp.mv = 0;
                    else
                        tmp.mv = f.mv - 1;
                   // printf("%d\n",tmp.mv);
                    tmp.x = xx;
                    tmp.y = yy;
                    PQ.push(tmp);
                }
                else if(s[xx][yy] == 'T')
                {
                    if(f.mv >= 2)
                    {
                        vis[xx][yy] = 1;
                        if(check(xx,yy))
                        tmp.mv = 0;
                        else
                        tmp.mv = f.mv - 2;
                        tmp.x = xx;
                        tmp.y = yy;
                        PQ.push(tmp);
                    }
                }
                else if(s[xx][yy] == 'R')
                {
                    if(f.mv >= 3)
                    {
                        vis[xx][yy] = 1;
                        if(check(xx,yy))
                        tmp.mv = 0;
                        else
                        tmp.mv = f.mv - 3;
                        tmp.x = xx;
                        tmp.y = yy;
                        PQ.push(tmp);
                    }
                }
            }
        }
    }
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {

        scanf("%d%d%d",&n,&m,&mv);
        for(int i = 0; i < n; i++)
            scanf("%s",s[i]);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(s[i][j] == 'Y')
                {
                    stx = i;
                    sty = j;
                }
            }
        }
        bfs();
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(vis[i][j] && s[i][j] != 'P' && s[i][j] != 'Y')
                    printf("*");
                else printf("%c",s[i][j]);
            }
            printf("\n");
        }
        printf("\n");
    }
    return 0;
}
*/
/*hdu1226读错题了，不是由M位构成zzz
#include<bits/stdc++.h>
using namespace std;
const int maxn = 5010;
int flag[20];
struct node
{
    int len;
    int s[510];
}t[maxn];
queue<node>Q;
int n,cc,m;
int mod(node t)
{
    int res = 0;
    for(int i = 0; i < t.len; i++)
    {
        res = (res * cc + t.s[i]) % n;
    }
    return res;
}
void print(node x)
{
    for(int i = 0; i < x.len; i++)
    {
        if(x.s[i] < 10)
        {
            printf("%d",x.s[i]);
        }
        else
        {
            printf("%c",'A' + x.s[i] - 10);
        }
    }
    printf("\n");
}
int mark[maxn];
void bfs()
{
    while(!Q.empty())
        Q.pop();
    memset(mark,0,sizeof(mark));
    for(int i = 1; i < 16; i++)
    {
        if(flag[i])
        {
            int v = i % n;
            if(!v)
            {
                printf("%d\n",i);
                return;
            }
            node tmp;
            tmp.len = 1;
            tmp.s[0] = i;
            mark[v] = 1;
            Q.push(tmp);
        }
    }

    while(!Q.empty())
    {
        node x = Q.front();
       // printf("len:%d\n",x.len);
        Q.pop();
        int len = x.len + 1;
        if(len > 500)
            break;
      //  printf("len:%d\n",len);
        for(int i = 0; i < 16; i++)
        {
            if(flag[i])
            {
                //printf("%d\n",i);
                node tmp = x;
                tmp.s[len - 1] = i;
                //printf("%d\n",tmp.s[len]);
                tmp.len = len;
                //printf("%d\n",len);
                int v = mod(tmp);
                //printf("%d\n",v);
                if(mark[v])continue;
                mark[v] = 1;
                if(!v)
                {
                    print(tmp);
                    return;
                }
                Q.push(tmp);
                //printf("%d\n",tmp.len);
//                for(int i = 0; i < tmp.len; i++)
//                    printf("%d",tmp.s[i]);
//                printf("\n");
            }
        }
    }
    printf("give me the bomb please\n");
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        memset(flag,0,sizeof(flag));
        scanf("%d%d%d",&n,&cc,&m);
        for(int i = 1; i <= m; i++)
        {
            int c;
            scanf("%X",&c);
            if(c >= 0 && c <= 0)
            {
                flag[c] = 1;
            }
            else
            {
                flag[c] = 1;
            }
        }
//        for(int i = 0; i < 16; i++)
//        {
//            if(flag[i])
//                printf("%d ",i);
//        }
        if(n == 0)
        {
            if(flag[0] == 1)
                printf("0\n");
            else
                printf("give me the bomb please\n");
        }
        else
        {
            bfs();
        }
    }

    return 0;
}
*/
//NYOJ523
/*
总结:低级失误太多,多组数据没有清空数组,全局变量和局部变量名字搞混,没有仔细审题,漏了一个条件,每次压进队列的是新的下标
思路还是很好想的
*/
#include<cstdio>
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;
struct node
{
    int t;
    int x,y,z;
};
int a,b,c,d;
int maze[60][60][60],vis[60][60][60];
int dir[6][3] = {{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};
queue<node>Q;

void bfs()
{
//    for(int i = 0; i < 6; i++)
//    {
//        printf("x:%d y:%d z:%dd\n",dir[i][0],dir[i][1],dir[i][2]);
//    }
    while(!Q.empty())
        Q.pop();
    memset(vis,0,sizeof(vis));

    node tmp;
    tmp.x = tmp.y = tmp.z = tmp.t = 0;
    vis[0][0][0] = 1;
    Q.push(tmp);
    while(!Q.empty())
    {
        node top = Q.front();
        Q.pop();
        //printf("%d\n",t);
        if(top.x == a - 1 && top.y == b - 1 && top.z == c - 1 && top.t <= d)
        {
            printf("%d\n",top.t);
            return;
        }
//        if(top.t > t)
//        {
//            break;
//        }
        int x,y,z,t;
        x = top.x;y = top.y;z = top.z;t = top.t;
        for(int i = 0; i < 6; i++)
        {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            int zz = z + dir[i][2];
          //  printf("x:%d y:%d z:%d\n",x,y,z);
          //  printf("xx:%d yy:%d zz:%d\n",xx,yy,zz);
            if(xx >= 0 && xx < a && yy >= 0 && yy < b && zz >= 0 && zz < c)
            {
                if(!vis[xx][yy][zz] && !maze[xx][yy][zz])
                {

                    vis[xx][yy][zz] = 1;
                    node tmp;
                    tmp.x = xx;tmp.y = yy;tmp.z = zz;tmp.t = t + 1;
                    Q.push(tmp);
                }


            }
        }


    }
    printf("-1\n");

}
int main()
{
    int _;
    cin>>_;
    while(_--)
    {
        memset(maze,0,sizeof(maze));
        scanf("%d%d%d%d",&a,&b,&c,&d);
        for(int i = 0; i < a; i++)
        {
            for(int j = 0; j < b; j++)
            {
                for(int k = 0; k < c; k++)
                {

                    scanf("%d",&maze[i][j][k]);
                }
            }
        }
        bfs();
    }
    return 0;
}

//POJ2251
/*
和上一道题目类似,改改就好
*/
#include<cstdio>
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;
struct node
{
    int t;
    int x,y,z;
};
int a,b,c,d;
int stx,sty,stz,edx,edy,edz;
int maze[60][60][60],vis[60][60][60];
char mp[50][50];
int dir[6][3] = {{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};
queue<node>Q;

void bfs()
{
//    for(int i = 0; i < 6; i++)
//    {
//        printf("x:%d y:%d z:%dd\n",dir[i][0],dir[i][1],dir[i][2]);
//    }
    while(!Q.empty())
        Q.pop();
    memset(vis,0,sizeof(vis));
    node tmp;
    tmp.t = 0;
    tmp.x = stx;tmp.y = sty;tmp.z = stz;
    vis[stx][sty][stz] = 1;
    Q.push(tmp);
    while(!Q.empty())
    {
        node top = Q.front();
        Q.pop();
        //printf("%d\n",t);
        if(top.x == edx && top.y == edy && top.z == edz)
        {
            printf("Escaped in %d minute(s).\n",top.t);
            return;
        }
//        if(top.t > t)
//        {
//            break;
//        }
        int x,y,z,t;
        x = top.x;y = top.y;z = top.z;t = top.t;
        for(int i = 0; i < 6; i++)
        {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            int zz = z + dir[i][2];
          //  printf("x:%d y:%d z:%d\n",x,y,z);
          //  printf("xx:%d yy:%d zz:%d\n",xx,yy,zz);
            if(xx >= 0 && xx < a && yy >= 0 && yy < b && zz >= 0 && zz < c)
            {
                if(!vis[xx][yy][zz] && !maze[xx][yy][zz])
                {

                    vis[xx][yy][zz] = 1;
                    node tmp;
                    tmp.x = xx;tmp.y = yy;tmp.z = zz;tmp.t = t + 1;
                    Q.push(tmp);
                }


            }
        }


    }
    printf("Trapped!\n");

}
int main()
{

    while(~scanf("%d%d%d",&a,&b,&c))
    {
        if(a == 0 && b == 0 && c == 0)
            break;
        memset(maze,0,sizeof(maze));
      while(!Q.empty())
        Q.pop();
        node start;
        for(int i = 0; i < a; i++)
        {
            for(int j = 0; j < b; j++)
                scanf("%s",mp[j]);
            for(int j = 0; j < b; j++)
            {
                for(int k = 0; k < c; k++)
                {
                   if(mp[j][k] == '.')
                      maze[i][j][k] = 0;
                   else if(mp[j][k] == '#')
                      maze[i][j][k] = 1;
                   else if(mp[j][k] == 'S')
                   {
                       stx = i;sty = j;stz = k;
                   }
                   else if(mp[j][k] == 'E')
                   {
                       edx = i;edy = j;edz = k;
                   }
                }
            }
        }
        bfs();
    }
    return 0;
}

//NYOJ 1129
#include<cstdio>
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;
const int maxn = 110;
int n,m;
char s[maxn][maxn];
//N E S W:0 1 2 3
int dir[4][4][2] = {{0,-1,-1,0,0,1,1,0},{-1,0,0,1,1,0,0,-1},{0,1,1,0,0,-1,-1,0},{1,0,0,-1,-1,0,0,1}};
int edx,edy;
int flag = 0;
int book[4][maxn][maxn];
//标记一下四个方向
int fun[4][4] = {3,0,1,2,0,1,2,3,1,2,3,0,2,3,0,1};
void dfs(int x,int y,int t)
{
    if(flag != 0)
    {
        return;
    }
    if(x == edx && y == edy)
    {
        flag = 1;
        return;
    }

    for(int i = 0; i < 4; i++)
    {
        int xx = x + dir[t][i][0];
        int yy = y + dir[t][i][1];
       // printf("t:%d fun:%d x:%d y:%d xx:%d yy:%d\n",t,fun[t][i],x,y,xx,yy);
        if(xx >= 0 && xx < n && yy >= 0 && yy < m && s[xx][yy] != '#')
        {
            //printf("%d %d\n",xx,yy);
            if(book[fun[t][i]][xx][yy] == 1)
            {
                flag = -1;
                return;
            }
            book[fun[t][i]][xx][yy] = 1;
            dfs(xx,yy,fun[t][i]);
            book[fun[t][i]][xx][yy] = 0;
            if(flag != 0)//转圈的话本应该找不到,但是如果不返回就会找到了,下面的第二个样例就是
                return;
        }
    }
}
int main()
{
//    for(int i = 0; i < 4; i++)
//    {
//        for(int j = 0; j < 4; j++)
//        {
//            printf("x:%d,y:%d\n",dir[i][j][0],dir[i][j][1]);
//        }
//    }
    while(~scanf("%d%d",&n,&m))
    {
        memset(book,0,sizeof(book));
        for(int i = 0; i < n; i++)
            scanf("%s",s[i]);

        getchar();
        char c;
        scanf("%c",&c);
        int t;
        if(c == 'N')t = 0;
        else if(c == 'E')t = 1;
        else if(c == 'S')t = 2;
        else t = 3;
        int stx,sty;
//        for(int i = 0; i < n; i++)
//            printf("%s\n",s[i]);
//        printf("%c\n",c);
//        for(int i = 0; i < n; i++)
//            printf("%d\n",strlen(s[i]));
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
        {
            if(s[i][j] == 'T')
            {
                stx = i;sty = j;
               // printf("%d %d\n",stx,sty);
            }
            if(s[i][j] == 'X')
            {
                edx = i;edy = j;
            }
        }
      //  printf("%d %d\n",stx,sty);
        flag = 0;
        dfs(stx,sty,t);
        if(flag == 1)
            printf("YES\n");
        else printf("NO\n");
    }
}
/*

3 3
T..
.##
..X
E

5 5
T....
.###.
.#X#.
.#.#.
.....
E

*/
//NYOJ1100
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 110;
struct node
{
    int cost,x,y;
    bool operator < (const node &x)const
    {
        return cost > x.cost;
    }
};
char s[maxn][maxn];
int n,m,stx,sty,edx,edy;
int dir[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
int vis[maxn][maxn];
priority_queue <node>PQ;
void bfs()
{
    while(!PQ.empty())
        PQ.pop();
    memset(vis,0,sizeof(vis));
    node a;
    a.x = stx;a.y = sty;a.cost = 0;
    vis[stx][sty] = 1;
    PQ.push(a);
    while(!PQ.empty())
    {
        node top = PQ.top();
        if(top.x == edx && top.y == edy)
        {
            printf("%d\n",top.cost - 44);
            return;
        }
        PQ.pop();
        int x = top.x;int y = top.y;int cost = top.cost;
        for(int i = 0; i < 4; i++)
        {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            if(xx >= 0 && xx < n && yy >= 0 && yy < m && !vis[xx][yy] && s[xx][yy] != '#')
            {

                vis[xx][yy] = 1;
                node tmp;
                tmp.x = xx;tmp.y = yy;tmp.cost = cost + (s[xx][yy] - 'A' + 1);
               // printf("%d %d %d %d\n",xx,yy,cost,tmp.cost);
                PQ.push(tmp);
            }
        }
    }
    printf("-1\n");
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        for(int i = 0; i < n; i++)
            scanf("%s",s[i]);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(s[i][j] == 's')
                {
                    stx = i;sty = j;
                }
                if(s[i][j] == 'l')
                {
                    edx = i;edy = j;
                }
            }
        }
        bfs();
    }
    return 0;
}
