http://blog.csdn.net/wxfwxf328/article/details/7599929
POJ2774
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn =  200050;
int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
int sa[maxn],rank[maxn],height[maxn];
int cmp(int *r,int a,int b,int l)
{
    return r[a]==r[b]&&r[a+l]==r[b+l];
}
void da(int *r,int *sa,int n,int m)//n表示字符串的字符的个数，包括最后人为添加的字符,m表示最大的字符代表的整数+1
{
    int i,j,p,*x=wa,*y=wb,*t;
    for(i=0; i<m; i++) ws[i]=0;
    for(i=0; i<n; i++) ws[x[i]=r[i]]++;
    for(i=1; i<m; i++) ws[i]+=ws[i-1];
    for(i=n-1; i>=0; i--) sa[--ws[x[i]]]=i;
    for(j=1,p=1; p<n; j*=2,m=p)
    {
        for(p=0,i=n-j; i<n; i++) y[p++]=i;
        for(i=0; i<n; i++) if(sa[i]>=j) y[p++]=sa[i]-j;
        for(i=0; i<n; i++) wv[i]=x[y[i]];
        for(i=0; i<m; i++) ws[i]=0;
        for(i=0; i<n; i++) ws[wv[i]]++;
        for(i=1; i<m; i++) ws[i]+=ws[i-1];
        for(i=n-1; i>=0; i--) sa[--ws[wv[i]]]=y[i];
        for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1; i<n; i++)
            x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
    }
    return;
}
void calheight(int* r, int* sa, int n)//求height数组,n表示有n个需要比较的，不包括末尾的0
{
    int i, j, k = 0;
    for(i = 1; i <= n; i++) rank[sa[i]] = i;
    for(i = 0; i < n; height[rank[i++]] = k)
        for(k ? k-- : 0, j = sa[rank[i] - 1]; r[i + k] == r[j + k]; k++);
    return;
}
char str[maxn];
int s[maxn];
int main()
{
    scanf("%s",str);
    int l1 = strlen(str);
    int k = 0;
    for(int i = 0; i < l1; i++)
        s[k++] = str[i] - 'a' + 1;
    s[k++] = 27;
    scanf("%s",str);
    int l2 = strlen(str);
    for(int i = 0; i < l2; i++)
        s[k++] = str[i] - 'a' + 1;
    s[k] = 0;
    da(s,sa,k + 1,28);
    calheight(s,sa,k);
    int ans = 0;
    for(int i = 2; i <= k; i++)
    {
        if(sa[i] < l1 && sa[i - 1] > l1 || sa[i] > l1 && sa[i - 1] < l1)//sa[i]表示第i个字符串后缀的首字符所在的位置
            ans = max(ans,height[i]);
    }
    printf("%d\n", ans);
}

uvalive4513//目的是要求字符串中重复出现m次以上的最大字符串长度并求出第右边出现的那个字符串
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn =  40005;
int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
int sa[maxn],rankk[maxn],height[maxn];
int ss;
int cmp(int *r,int a,int b,int l)
{
    return r[a]==r[b]&&r[a+l]==r[b+l];
}
void da(int *r,int *sa,int n,int m)//n表示字符串的字符的个数，包括最后人为添加的字符,m表示最大的字符代表的整数+1
{
    int i,j,p,*x=wa,*y=wb,*t;
    for(i=0; i<m; i++) ws[i]=0;
    for(i=0; i<n; i++) ws[x[i]=r[i]]++;
    for(i=1; i<m; i++) ws[i]+=ws[i-1];
    for(i=n-1; i>=0; i--) sa[--ws[x[i]]]=i;
    for(j=1,p=1; p<n; j*=2,m=p)
    {
        for(p=0,i=n-j; i<n; i++) y[p++]=i;
        for(i=0; i<n; i++) if(sa[i]>=j) y[p++]=sa[i]-j;
        for(i=0; i<n; i++) wv[i]=x[y[i]];
        for(i=0; i<m; i++) ws[i]=0;
        for(i=0; i<n; i++) ws[wv[i]]++;
        for(i=1; i<m; i++) ws[i]+=ws[i-1];
        for(i=n-1; i>=0; i--) sa[--ws[wv[i]]]=y[i];
        for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1; i<n; i++)
            x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
    }
    return;
}
void calheight(int* r, int* sa, int n)//求height数组,n表示有n个需要比较的，不包括末尾的0
{
    int i, j, k = 0;
    for(i = 1; i <= n; i++) rankk[sa[i]] = i;
    for(i = 0; i < n; height[rankk[i++]] = k)
        for(k ? k-- : 0, j = sa[rankk[i] - 1]; r[i + k] == r[j + k]; k++);
    return;
}
char str[maxn];
int s[maxn];
int judge(int x,int n) {
    int ans = -1;
    for (int i = 1; i <= n; i++) {//从最小的字典序的那个开始
    if (n - sa[i] < x) continue;//后缀长度不足x就跳到下一个
    int Max = sa[i], cnt = 1;//最大值为第i个后缀首字符的位置
    while (height[i + 1] >= x && i < n) {//排名第i+1个和排名第i个的后缀的最大公共前缀
        Max = max(Max, sa[i + 1]);  //在公共前缀符合的前提下更新最大值
        cnt++;  //找出有多少个符合这样长度的后缀
        i++;
    }
    if (cnt >= ss)
        ans = max(ans, Max);//满足了就更新最大值
    }
    return ans;
}

void solve(int n) {
    if (judge(1,n) == -1) { //如果长度为1的公共前缀都不符合就没有这样的子串
    printf("none\n");
    return;
    }
    int l = 1, r = n - ss + 1 + 1;//二分每一个字符串的长度
    while (l < r) {
    int mid = (l + r) / 2;
    if (judge(mid,n) != -1) l = mid + 1;//判断是否符合条件
    else r = mid;
    }
    l--;
    printf("%d %d\n", l, judge(l,n));
}

int main() {
    while (~scanf("%d", &ss) && ss) {
    scanf("%s", str);
    int len = strlen(str);
    for (int i = 0; i < len; i++)
        s[i] = str[i] - 'a' + 1;
    s[len] = 0;
    da(s,sa,len + 1,27);
    calheight(s,sa,len);
    solve(len);
    }
    return 0;
}

POJ3450
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn =  800050;
int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
int sa[maxn],rankk[maxn],height[maxn];
int ss;
int cmp(int *r,int a,int b,int l)
{
    return r[a]==r[b]&&r[a+l]==r[b+l];
}
void da(int *r,int *sa,int n,int m)//n表示字符串的字符的个数，包括最后人为添加的字符,m表示最大的字符代表的整数+1
{
    int i,j,p,*x=wa,*y=wb,*t;
    for(i=0; i<m; i++) ws[i]=0;
    for(i=0; i<n; i++) ws[x[i]=r[i]]++;
    for(i=1; i<m; i++) ws[i]+=ws[i-1];
    for(i=n-1; i>=0; i--) sa[--ws[x[i]]]=i;
    for(j=1,p=1; p<n; j*=2,m=p)
    {
        for(p=0,i=n-j; i<n; i++) y[p++]=i;
        for(i=0; i<n; i++) if(sa[i]>=j) y[p++]=sa[i]-j;
        for(i=0; i<n; i++) wv[i]=x[y[i]];
        for(i=0; i<m; i++) ws[i]=0;
        for(i=0; i<n; i++) ws[wv[i]]++;
        for(i=1; i<m; i++) ws[i]+=ws[i-1];
        for(i=n-1; i>=0; i--) sa[--ws[wv[i]]]=y[i];
        for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1; i<n; i++)
            x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
    }
    return;
}
void calheight(int* r, int* sa, int n)//求height数组,n表示有n个需要比较的，不包括末尾的0
{
    int i, j, k = 0;
    for(i = 1; i <= n; i++) rankk[sa[i]] = i;
    for(i = 0; i < n; height[rankk[i++]] = k)
        for(k ? k-- : 0, j = sa[rankk[i] - 1]; r[i + k] == r[j + k]; k++);
    return;
}
int s[maxn],loc[maxn];
char str[201], ans[201] ;
bool vis[4001] ;

int check(int mid, int len){
    int count = 0 ;
    memset(vis, false, sizeof(vis)) ;//重置访问数组
    for(int i=2; i<=len; i++){
        if(height[i]<mid){//如果字典序第i个后缀和第i-1个后缀的最大公共后缀的长度小于二分的长度
            memset(vis, false, sizeof(vis)) ;//重置访问数组
            count = 0 ;//计数为0
            continue ;
        }
        if(!vis[loc[sa[i-1]]])  vis[loc[sa[i-1]]] = true, count ++ ;//如果第i-1个后缀的首位置在的字符串未被访问过，则可以算作这个长度下的公共子串的一部分
        if(!vis[loc[sa[i]]])    vis[loc[sa[i]]] = true, count ++ ;//如果第i个后缀的首位置在的字符串未被访问过，则可以算作这个长度下的公共子串的一部分
        if(count==ss){//如果计数达到了m个
            for(int j=0; j<mid; j++)
                ans[j] = s[sa[i]+j] + 'a' - 1 ;//从第i个后缀的首位置开始到二分长度的位置的每一个整数还原为字符
            ans[mid] = '\0' ;//最后一个赋值成0
            return 1 ;
        }
    }
    return 0 ;
}
int main()
{
    int t, n, i, j, max, temp, flag ;
    while(~scanf("%d", &ss)&&ss){
        n = 0 , temp = 30, flag = 0 ;
        for(i = 1; i <= ss; i++){
            scanf("%s", str) ;
            for(j=0; j<strlen(str); j++){
                loc[n] = i ;//记录字符属于第几个字符串
                s[n++] = str[j] - 'a' + 1 ;//放进去字符
            }
            loc[n] = temp ;//最后放一个不是1~26中的
            s[n++] = temp ++ ;//赋值
        }
        s[n] = 0 ;//末尾放一个0
        da(s, sa,n+1, temp) ;//temp最大的字符，之前加上了1
        calheight(s,sa,n) ;
        int left=0, right=strlen(str), mid ;
        while(right>=left){
            mid = (right + left) / 2 ;
            if(check(mid, n)){
                left = mid + 1 ;
                flag = mid ;
            }
            else
                right = mid - 1 ;
        }
        if(flag)printf("%s\n", ans) ;
        else printf("IDENTITY LOST\n") ;
    }
    return 0 ;
}
