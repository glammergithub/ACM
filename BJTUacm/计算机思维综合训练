1004 - 伊甸园日历游戏 
//这道题是博弈论的类型，蓝桥杯也做过类似的一道，就是暴力，每一步都是最优走法，从最后一天开始向前找，设某一天开始走到最后一天失败为0，成功为1，那么
如果当前天失败了，那么它前面的那一步一定是成功的，查询所有的情况，包括天数为这个月的第一天，普通天，这一年的第一天，闰年的3月的第一天，按月份的话包括
闰年三月，当年第一个月，然后再按照当年第一天，这个月第一天，是否为闰年，减去一天直到初始天为止。
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
int f[2020][15][50];
int d[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
bool judge(int a)
{
	if(a % 400 == 0 || a % 4 == 0 && a % 100 != 0)
	   return true;
	else return false;
}
void fun()
{
	f[2001][11][4] = 0;
	int a = 2001,b = 11,c = 4;
	while(!(a == 1900 && b == 1 && c == 1))
	{
		if(!f[a][b][c])
		{
			if(b == 1 && c == 1)f[a - 1][12][31] = 1;
		else if(c == 1)
		{
			if(judge(a) && b == 3)f[a][b - 1][d[b - 1] + 1] = 1;
			else f[a][b - 1][d[b - 1]] = 1;
		}
		else f[a][b][c - 1] = 1;
		if(b == 1)
	    f[a - 1][12][c] = 1; 
	    else if(b == 3)
	    {
	    	if(judge(a) && c <= d[b - 1] + 1)
				   f[a][b - 1][c] = 1;	
			else 
			{
				if(c <= d[b - 1])
				   f[a][b - 1][c] = 1;	
			}
		}
		else 
		{
			f[a][b - 1][c] = 1;
		}
		
		}
		if(b == 1 && c == 1)
		{
			a--;
			b = 12;
			c = 31;
		}
		else if(c == 1)
		{
			if(b == 3 && judge(a))
			{
				c = d[b - 1] + 1;
				b--;
			}
			else
			{
			   c = d[b - 1];
			   b--;	
			 } 
		}
		else 
		{
			c--;
		}
	}
}
int main()
{
	int n;
	fun();
	while(cin>>n)
	{
		while(n--)
		{
			int a,b,c;
		cin>>a>>b>>c;
		if(f[a][b][c])
		printf("YES\n");
		else 
		printf("NO\n");
		}
		
	}
	return 0;
}

1006 - 晴天小猪历险记之Hill
这道题动归很复杂，所以建图找最短路，注意建图的时候，这个题面有点问题，是向上和左上的，就是不在边界的时候看一个点的下方，右下方，左，右有没有符合的点
在边界的时候，左边还得看这一行最右边和下一行最右边（还包括右边，下边，右下边），右边还得看这一行最左边和下一行最左边（还包括左边，右下边，下边），然后
spfa是单源有向图找最短路，所以直接把下一个点的权值放在边上找一下就好
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 500510;
int a[1010][1010];
struct edge
{
    int from,to,v,next;
}edge[maxn * 4];
int n;
int d[maxn],vis[maxn];
int head[maxn];
int t = 1;
void add(int a,int b,int c)
{
    edge[t].from = a;
    edge[t].to = b;
    edge[t].v = c;
    edge[t].next = head[a];
    head[a] = t++;
}
queue<int>Q;
void spfa(int s)
{
    memset(vis,0,sizeof(vis));
    memset(d,INF,sizeof(d));
    Q.push(s);
    d[s] = 0;
    vis[s] = 1;
    while(!Q.empty())
    {
        int u = Q.front();
        Q.pop();
        vis[u] = 0;
        for(int i = head[u]; i != -1; i = edge[i].next)
        {
            int v = edge[i].to;
            if(d[v] > d[u] + edge[i].v)
            {
                d[v] = d[u] + edge[i].v;
                if(!vis[v])
                {
                    Q.push(v);
                    vis[v] = 1;
                }
            }
        }
    }
}
int main()
{

	cin>>n;
	memset(a,0,sizeof(a));
	memset(head,-1,sizeof(head));
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= i; j++)
		   cin>>a[i][j];
	}
	int tt = 1;
	for(int i = 1; i <= n; i++)
        for(int j = 1; j <= i; j++)
    {
            if(i == 1 && j == 1)
            {
                add(1,2,a[2][1]);
                add(1,3,a[2][2]);
            }
            else if(j == 1)
            {
                add(tt,tt + i,a[i + 1][1]);
                add(tt,tt + i + 1,a[i + 1][2]);
                add(tt,tt + i - 1,a[i][i]);
                add(tt,tt + 1,a[i][2]);
                add(tt,tt + i * 2,a[i + 1][i + 1]);
            }
            else if(j == i)
            {
                add(tt,tt - 1, a[i][j - 1]);
                add(tt,tt - i + 1,a[i][1]);
                add(tt,tt + i,a[i + 1][j]);
                add(tt,tt + i + 1,a[i + 1][j + 1]);
                add(tt,tt + 1,a[i + 1][1]);
            }
            else
            {
                add(tt,tt + i,a[i + 1][j]);
                add(tt,tt + i + 1,a[i + 1][j + 1]);
                add(tt,tt - 1, a[i][j - 1]);
                add(tt,tt + 1,a[i][j + 1]);
            }
            tt++;
    }
   // cout<<t<<endl;
    spfa(1);
//    for(int i = 1; i <= n * (n - 1) / 2 + 1; i++)
//        cout<<d[i]<<" ";
//    cout<<endl;
    cout<<d[n * (n - 1) / 2 + 1] + a[1][1]<<endl;
	return 0;
}


1008篝火晚会
先随便构造一个满足题意的环，然后看有多少个重复的，就是看位置相对差，因为可以旋转
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 5e4 + 10;
int p[maxn][2],used[maxn],a[maxn],d[maxn];
int n;
int gouzao()
{
    memset(used,0,sizeof(used));
    a[1] = 1;
    used[1] = 1;
    for(int i = 2; i <= n; i++)
    {
        int x = p[a[i - 1]][0],y = p[a[i - 1]][1];
        if(!used[x])
        {
            a[i] = x;
            used[x] = 1;
        }
        else
        {
            if(!used[y])
            {
                a[i] = y;
                used[y] = 1;
            }
            else
                return 0;
        }
    }
    return 1;
}
int peidui()
{
    memset(d,0,sizeof(d));
    int maxx = 0;
    for(int i = 1; i <= n; i++)
    {
        d[(a[i] - i + n) % n]++;
    }
    for(int i = 0; i < n; i++)
    {
        if(d[i] > maxx)
            maxx = d[i];
    }
    memset(d,0,sizeof(d));
    for(int i = 1; i <= n; i++)
    {
        d[(a[n - i + 1] - i + n) % n]++;
    }
    for(int i = 0; i < n; i++)
    {
        if(d[i] > maxx)
            maxx = d[i];
    }
    return n - maxx;
}
int main()
{
    cin>>n;
    for(int i = 1; i <= n; i++)
        cin>>p[i][0]>>p[i][1];
    if(gouzao())
        printf("%d\n",peidui());
    else
        printf("-1\n");
    return 0;
}

最小数字倍数 
问用m个数随意组合成n的严格倍数，并且这个数是最小的
正常做肯定超时，所以需要采用余数，将所有的数字排序，从小到大，这样在之后找的时候每次找的最后结果都是最小的。然后对n取余，记录最小的那个
设后继为-1，然后标记一下它们是第几个余数。将所有余数压进队列里，从头开始找，每次的余数作为高位和低位组合，由于是需要%n等于0，所以只要余数相加
就行，然后将没出现过的余数继续压到队列里，记录它们的后继，并用一个数组存一下，纽带就是余数的序号。这样找到的第一个就是需要的最小的能整除n的
时间复杂度O(n2)
#include<cstdio>
#include<queue>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn = 5050;
queue<int>Q;
bool vis[maxn];
int nex[maxn],mark[maxn],res[maxn],num[maxn],a[maxn];
int main()
{
    int n,m;
    cin>>n>>m;
    memset(vis,0,sizeof(vis));
    int cnt = 0;

    for(int i = 1; i <= m; i++)
        cin>>a[i];
    sort(a + 1,a + m + 1);
    for(int i = 1; i <= m; i++)
    {
        if(!vis[a[i] % n] && a[i])
        {
            Q.push(a[i] % n);
            vis[a[i] % n] = true;
            mark[a[i] % n] = ++cnt;
            num[cnt] = a[i];
            nex[cnt] = -1;
        }
    }
    int ans = 0;
    while(!Q.empty())
    {
        int l = Q.front();
        Q.pop();
        if(l == 0)
        {
            ans = mark[l];
            break;
        }
        for(int i = 1; i <= m; i++)
        {
            int tmp = (l * 10 + a[i]) % n;
            if(!vis[tmp])
            {
                vis[tmp] = true;
                Q.push(tmp);
                mark[tmp] = ++cnt;
                num[cnt] = a[i];
                nex[cnt] = mark[l];
            }
        }
    }
    cnt = 0;
    while(ans != -1)
    {
        res[cnt++] = num[ans];
        ans = nex[ans];
    }
    for(int i = cnt - 1; i >= 0; i--)
        printf("%d",res[i]);
    printf("\n");
    return 0;
}

每次给一个矩形的左下角和右上角的坐标，求所有矩阵的面积和
这道题用离散化，所有矩阵的四个顶点延伸分割成小矩形，将它们排序，遍历每一个小矩形，再遍历每一个已知的矩形看一下能否包含这个矩形即可
#include<cstdio>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long ll;
struct node
{
    ll x1,y1,x2,y2;
}nod[300];
ll x[300],y[300];
int main()
{
    int n;
    cin>>n;
    for(int i = 1; i <= n; i++)
    {
        cin>>nod[i].x1>>nod[i].y1>>nod[i].x2>>nod[i].y2;
        x[2 * i - 1] = nod[i].x1;
        x[2 * i] = nod[i].x2;
        y[2 * i - 1] = nod[i].y1;
        y[2 * i] = nod[i].y2;    }
    sort(x + 1,x + 2 * n + 1);
    sort(y + 1, y + 2 * n + 1);
    ll ans = 0;
    for(int i = 1 ;i <= 2 * n - 1; i++)
        for(int j = 1; j <= 2 * n - 1; j++)
    {
        int flag = 0;
        for(int k = 1; k <= n; k++)
        {
            if(nod[k].x1 <= x[i] && nod[k].x2 >= x[i + 1] && nod[k].y1 <= y[j] && nod[k].y2 >= y[j + 1])
            {
                flag = 1;
                break;
            }
        }
        if(flag)
        {
            ans += (x[i + 1] - x[i]) * (y[j + 1] - y[j]);
        }
    }
    cout<<ans<<endl;
    return 0;
}

1078连续数之和
给了n个数，让求连续和能被k整除有多少个
求前缀和，所求就是sum[i] % k == 0 || (sum[i] - sum[j]) % k == 0的情况有多少个
sum[i] % k = sum[j] % k就是先把每一个前缀和都模k然后用数组记录一下对应的余数，这样在这些余数中找两两相等的情况
假设有x个就是x * (x - 1) / 2，但是余数为0的时候就是sum[i] % k == 0的时候代表的是只有一个前缀和就可以整除k，和两个前缀和的情况不同需要单独加上
#include<cstdio>
#include<iostream>
using namespace std;
const int maxn = 5e5 + 10;
typedef long long ll;
//第一行有两个正整数，分别代表 n 和 k 。输入数据保证有 n≤ 500 000 ， k≤ 100 000 。
//　　以下 n 行每行一个正整数。这些正整数保证都不大于 10 000
//一个正整数。它应该是你的答案mod 1234567的结果
ll a[maxn],r[100010];
ll mod = 1234567;
int main()
{
    int n,k;
    cin>>n>>k;
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    ll sum = 0;
    for(int i = 1; i <= n; i++)
    {
        sum += a[i];
        r[sum % k]++;
    }
    ll cnt = r[0];
    for(int i = 0; i < k; i++)
    {
        cnt += r[i] * (r[i] - 1) / 2;
    }
    cout<<cnt % mod <<endl;
    return 0;
}

//多项式输出
#include<cstdio>
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int a[110];
    for(int i = 1; i <= n + 1;i++)
        cin>>a[i];
    for(int i = 1; i <= n + 1; i++)
    {
        if(!a[i])continue;
        if(i < n)
        {
            if(a[i] > 0)
            {
                if(i != 1)
                    printf("+");
            }
            if(abs(a[i]) != 1)
             printf("%dx^%d",a[i],n - i + 1);
             else
             {
                 if(a[i] == -1)
                    printf("-x^%d",n - i + 1);
                else
                    printf("x^%d",n - i + 1);
             }

        }
        if(i == n)
        {
            if(a[i] > 0)
            {
                printf("+");
            }
            if(a[i] == 1)
             printf("x");
             else if(a[i] == -1)
                printf("-x");
             else
             {
                 printf("%dx",a[i]);
             }
        }
        if(i == (n + 1))
        {
         if(a[i] > 0)
            {
                printf("+");
            }
           printf("%d\n",a[i]);
        }


    }
    return 0;
}
/*
5
100 -1 1 -3 0 10
*/
陶陶抢苹果
#include<cstdio>
#include<iostream>
#include<cmath>
#include<algorithm>
using namespace std;
const int maxn = 1e5 + 10;
int a[maxn];
struct node
{
    int w,id,sum;
}b[maxn];
bool cmp(node c,node d)
{
    return c.w > d.w;
}
bool cmb(node c,node d)
{
    return c.id < d.id;
}
int main()
{
    int n,m;
    cin>>n>>m;
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    sort(a + 1,a + n + 1);
    for(int i = 1; i <= m; i++)
    {
        cin>>b[i].w;
        b[i].id = i;
        b[i].sum = 0;
    }
    sort(b + 1,b + m + 1,cmp);
    for(int i = n; i >= 1; i -= m)
    {
        for(int j = 1; j <= m; j++)
        {
            b[j].sum += a[i - j + 1];
        }
    }
    sort(b + 1,b + m + 1,cmb);
    for(int i = 1; i <= m; i++)
        printf("%d ",b[i].sum);
    return 0;
}
/*
绳子
#include <iostream>
#include<cstdio>
using namespace std;
int a[1010];
int n,m;
int judge(int x)
{
    int cnt = 0;
    for(int i = 1; i <= n; i++)
    {
        cnt += a[i] / x;
    }
    if(cnt >= m)
        return 1;
    else
        return 0;
}
int main()
{

    cin>>n>>m;
    int maxx = -1.0;
    for(int i = 1; i <= n; i++)
    {
        cin>>a[i];
        a[i] *= 100;
        maxx = max(maxx,a[i]);
    }
    int l = 0,r = maxx,res;
    while(l <= r)
    {
        double mid = (l + r) / 2;
        cout<<1<<endl;
        if(judge(mid))
        {
            res = mid;
            l = mid + 1;
        }
        else
            r = mid - 1;
    }
    printf("%d.%d%d\n",res / 100,(res / 10) % 10,res % 10);
    return 0;
}
*/
汉诺塔
#include<cstdio>
#include<iostream>
#include<string>
using namespace std;
const int L = 110;
string mul(string a,string b)//高精度乘法a,b,均为非负整数
{
    string s;
    int na[L],nb[L],nc[L],La=a.size(),Lb=b.size();//na存储被乘数，nb存储乘数，nc存储积
    fill(na,na+L,0);fill(nb,nb+L,0);fill(nc,nc+L,0);//将na,nb,nc都置为0
    for(int i=La-1;i>=0;i--) na[La-i]=a[i]-'0';//将字符串表示的大整形数转成i整形数组表示的大整形数
    for(int i=Lb-1;i>=0;i--) nb[Lb-i]=b[i]-'0';
    for(int i=1;i<=La;i++)
        for(int j=1;j<=Lb;j++)
        nc[i+j-1]+=na[i]*nb[j];//a的第i位乘以b的第j位为积的第i+j-1位（先不考虑进位）
    for(int i=1;i<=La+Lb;i++)
        nc[i+1]+=nc[i]/10,nc[i]%=10;//统一处理进位
    if(nc[La+Lb]) s+=nc[La+Lb]+'0';//判断第i+j位上的数字是不是0
    for(int i=La+Lb-1;i>=1;i--)
        s+=nc[i]+'0';//将整形数组转成字符串
    return s;
}
string add(string a,string b)//只限两个非负整数相加
{
    string ans;
    int na[L]={0},nb[L]={0};
    int la=a.size(),lb=b.size();
    for(int i=0;i<la;i++) na[la-1-i]=a[i]-'0';
    for(int i=0;i<lb;i++) nb[lb-1-i]=b[i]-'0';
    int lmax=la>lb?la:lb;
    for(int i=0;i<lmax;i++) na[i]+=nb[i],na[i+1]+=na[i]/10,na[i]%=10;
    if(na[lmax]) lmax++;
    for(int i=lmax-1;i>=0;i--) ans+=na[i]+'0';
    return ans;
}
int main()
{
    int n;
    cin>>n;
    string ans = "1";
    for(int i = 1; i <= n - 1; i++)
    {
        ans = mul(ans,"3");
        ans = add(ans,"1");
    }
    ans = mul(ans,"3");
    cout<<ans<<endl;
    return 0;
}

