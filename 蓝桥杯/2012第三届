第一题
很简单，但是需要注意实际情况不可能为负值所以第一个数为0
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<string>
#include<queue>
#include<vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const double pi = 3.1415826;

int main()
{
	int n;
	cin>>n;
	int x,y;
	cin>>x>>y;
    for(int i = 1; i <= 120; i++)
    {
    	if(i % 6 == 0)
    	{
    		x *= 2;
		}
		if(i % 4 == 0)
		{
			y *= 2;
		}
    	if(i == 1)
    	{
    		y -= x;
		}
		else if(i % 2 == 1)
		{
			y -= x;
		}
	}
	cout<<y<<endl;
	return 0;
}
//-979369984
//94371840

第二题 直接枚举10000~99999和？超时了，因为没有考虑数字重复的情况，这样也不好判断是否有数字重复了，所以枚举所有的数字，直接判断是否重复，时间复杂度差
在重复化简上面
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<string>
#include<queue>
#include<vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const double pi = 3.1415826;
char s1[10],s2[10];
int main()
{
	int res; 
	int cnt = 0;
    for(int a = 1; a <= 9; a++)
    {
    	for(int b = 0; b <= 9; b++)
        {
        	if(a == b)continue;
            for(int c = 0; c <= 9; c++)
			{
				if(c == a || c == b)continue;
				for(int d = 0; d <= 9; d++)
				{
					if(d == c || d == a || d == b)
					   continue;
					   for(int e = 0; e <= 9; e++)
					   {
					   	  if(e == a || e == b || e == c || e == d)
					   	   continue;
					   	   for(int i = 1; i <= 9; i++)
					   	   {
					   	   	  if((a * 10000 + b * 1000 + c * 100 + d * 10 + e) * i == e * 10000 + d * 1000 + c * 100 + b * 10 + a)
					   	   	    {
					   	   	       cout<<a<<" "<<b<<" "<<c<<" "<<d<<" "<<e<<endl;	
								}
							}
					   }
				}
			}	
		}  
	}
           
               
               
	return 0;
}

第三题
很坑爹 没思路，其实就是抓住极限条件和船长的条件 4轮就喝完，一开始最多20人 最少4人，依次递减 然后枚举人数 
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<string>
#include<queue>
#include<vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const double pi = 3.1415826;
char s1[10],s2[10];
int main()
{
    for(int a = 20; a >= 4; a--)
	    for(int b = a - 1; b >= 3; b--)
	       for(int c = b - 1; c >= 2; c--)
	          for(int d = c - 1; d >= 1; d--)
	          {
	          	if(1.0 / a + 1.0 / b + 1.0 / c + 1.0 / d == 1.0)
	          	{
	          		cout<<a<<" "<<b<<" "<<c<<" "<<d<<endl;
				}
			  }
		   
	return 0;
}
/*
20 5 4 2 0
18 9 3 2 0
15 10 3 2 0
12 6 4 2 0
*/

第四题
题意很简单，就是枚举所有的情况找和为100的，坑点在化为二进制数组的时候，有可能长度不够10，所以需要补0
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<string>
#include<queue>
#include<vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 0x3f3f3f3f;
const double pi = 3.1415826;
	int a[15],b[15];
void rev(int x)
{
	int tmp = x;
	memset(a,0,sizeof(a));
	memset(b,0,sizeof(b));
	int cnt = 0;
	while(x)
	{
		a[cnt++] = x % 2;
		x >>= 1;
	}
	int t = 1;
	//cout<<cnt<<endl;
	for(int i = cnt; i < 10; i++)
	    a[i] = 0;
	for(int i = 9; i >= 0; i--)
	{
		b[t++] = a[i];
	}
	
	int ans = 10;
	for(int i = 1; i <= 10; i++)
	{
		if(b[i])ans *= 2;
		else ans -= i;
	}
	if(ans == 100)
	{
		//cout<<tmp<<endl;
		for(int i = 1; i <= 10; i++)
		   printf("%d",b[i]);
		   cout<<endl;
	}
	return;
}

int main()
{
	//cout<<(1 << 10)<<endl;
    for(int i = 0; i < (1 << 10); i++)
	{
		rev(i);
	}	   
	return 0;
}

int main()
{
	//cout<<(1 << 10)<<endl;
    for(int i = 0; i < (1 << 10); i++)
	{
		rev(i);
	}	   
	return 0;
}

/*0010110011
0111010000
1011010000
*/

第五题
找规律即可，不太难 
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int a[100],b[100],c[100];
void rotate(int* x, int rank)

{

         int*y = (int*)malloc(rank * rank * sizeof(int)); // 填空



         for(int i=0; i<rank * rank; i++)

         {

                   y[(i % rank) * rank + rank - 1 - (i / rank)]= x[i];  // 填空

         }



         for(int i=0;i<rank*rank; i++)

         {

                   x[i]= y[i];

         }



         free(y);

}



int main(int argc, char* argv[])

{

         int x[4][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};

         int rank = 4;



         rotate(&x[0][0],rank);



         for(int i=0; i<rank; i++)

         {

                   for(int j=0; j<rank; j++)

                   {

                            printf("%4d",x[i][j]);

                   }

                   printf("\n");

         }



         return 0;

}
/*
rank * rank * sizeof(int)
(i % rank) * rank + rank - 1 - (i / rank)
*/

第六题
看图，找规律 简单
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int a[100],b[100],c[100];
void bigmul(int x, int y, int r[])

{

	int base = 10000;

	int x2 = x / base;

	int x1 = x % base;

	int y2 = y / base;

	int y1 = y % base;



	int n1 = x1 * y1;

	int n2 = x1 * y2;

	int n3 = x2 * y1;

	int n4 = x2 * y2;



	r[3]= n1 % base;

	r[2]= n1 / base + n2 % base + n3 % base;

	r[1]= n3 / base + n2 / base + n4 % base; // 填空

	r[0]= n4 / base;



	r[1]+= r[2] / base;  // 填空

	r[2]= r[2] % base;

	r[0]+= r[1] / base;

	r[1]= r[1] % base;

}





int main(int argc, char* argv[])

{

	int x[] = {0,0,0,0};



	bigmul(87654321,12345678, x);



	printf("%d%d%d%d\n",x[0],x[1],x[2],x[3]);



	return 0;

}

第七题
很简单 能读懂代码是要做什么就好
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int a[100],b[100],c[100];
int N = 0;



bool CheckStoneNum(int x[][6])

{

	for(int k=0; k<6; k++)

	{

		int NumRow = 0;

		int NumCol = 0;

		for(int i=0; i<6; i++)

		{

			if(x[k][i])NumRow++;

			if(x[i][k])NumCol++;

		}

		if(NumRow != 3 || NumCol != 3)return false;  // 填空

	}

	return true;

}



int GetRowStoneNum(int x[][6], int r)

{

	int sum = 0;

	for(int i=0; i<6; i++)          
	   if(x[r][i])sum++;

	return sum;

}



int GetColStoneNum(int x[][6], int c)

{

	int sum = 0;

	for(int i=0; i<6; i++)          
	 if(x[i][c])sum++;

	return sum;

}



void show(int x[][6])

{

	for(int i=0; i<6; i++)

	{

		for(int j=0; j<6; j++) printf("%2d", x[i][j]);

		printf("\n");

	}

	printf("\n");

}



void f(int x[][6], int r, int c);



void GoNext(int x[][6],  int r, int c)

{

	if(c<6)

		f(x,r,c + 1);   // 填空

	else

		f(x,r+1, 0);

}



void f(int x[][6], int r, int c)

{

	if(r==6)

	{

		if(CheckStoneNum(x))

		{

			N++;

			show(x);

		}

		return;

	}



	if(x[r][c])  // 已经放有了棋子

	{

		GoNext(x,r,c);

		return;

	}



	int rr = GetRowStoneNum(x,r);

	int cc = GetColStoneNum(x,c);



	if(cc>=3)  // 本列已满

		GoNext(x,r,c);

	else if(rr>=3)  // 本行已满

	f(x,r+1, 0);

	else

	{

		x[r][c]= 1;

		GoNext(x,r,c);

		x[r][c]= 0;



		if(!(3-rr>= 6-c || 3-cc >= 6-r))  // 本行或本列严重缺子，则本格不能空着！

			GoNext(x,r,c);

	}

}



int main(int argc, char* argv[])

{

	int x[6][6] = {

		{1,0,0,0,0,0},

		{0,0,1,0,1,0},

		{0,0,1,1,0,1},

		{0,1,0,0,1,0},

		{0,0,0,1,0,0},

		{1,0,1,0,0,1}

	};



	f(x,0, 0);



	printf("%d\n",N);



	return 0;

}

第八题
模拟就好，不难
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int a[110],b[100],c[100];
int main()
{
	//printf("%d",'a');
	int n;
	cin>>n;
	while(n--)
	{
		memset(a,0,sizeof(a));
		char s[110];
		scanf("%s",s);
		int len = strlen(s);
		for(int i = 0; i < len; i++)
		{
			a[i % 6] += s[i] - 'a' + 97;
		}
		/*for(int i = 0; i < 6; i++)
		   printf("%d ",a[i]);
		   printf("\n");*/
		for(int i = 0; i < 6; i++)
		{
			int x = a[i];
			int tmp = x,ans = 0;
			while(1)
			{
				ans = 0;
				while(tmp)
				{
					ans += tmp % 10;
					tmp /= 10;
				}
				tmp = ans;
				if(ans < 10)break;
			}
			a[i] = ans;
		}
		for(int i = 0; i < 6; i++)
		   printf("%d",a[i]);
		printf("\n");
	}
	return 0;
}

//这道题其实不难，首先分析甲获胜其实就三种情况，对应0~2赋值，生成100000个0~2的随机数，然后加起来再除以十万算概率 
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int a[110],b[100],c[100]; 
int main()
{
    double res[3];
    res[0] = 0.1 * 0.2 * 0.3 + 0.1 * 0.8 * 0.5;
    res[1] = 0.3 * 0.4 * 0.1 + 0.3 * 0.6 * 0.5;
    res[2] = 0.5 * 0.7 * 0.1 + 0.5 * 0.3 * 0.3;
    double sum = 0.0;
    for(int i = 0; i < 100000; i++)
    {
    	int a = rand() % 3;
    	if(a == 0)sum += res[0];
    	else if(a == 1)sum += res[1];
    	else sum += res[2];
	}
	cout<<sum / 100000<<endl;
	return 0;
}
//博弈论，直接暴力查询所有的可能，关键是状态转移，A为先手，拿走任意一个之后B失败当前球A必胜
#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const long long INFLL = 0x3f3f3f3f3f3f3f3f;
const int INF = 0x3f3f3f3f;
const int mod = 1e9;
const int maxn = 1e5 + 10;
char s1[100],s2[100];
int op[4] = {1,3,7,8}; 
int main()
{
    int a[10010];
    memset(a,0,sizeof(a));
    for(int i = 1; i < 10000; i++)
       for(int j = 0; j < 4; j++)
          if(i - op[j] > 0)
          {
          	 if(a[i - op[j]] == 0)
          	 {
          	 	a[i] = 1;
          	 	break;
			  }
		  }
	int n;
	cin>>n;
	while(n--)
	{
		int m;
		cin>>m;
		if(a[m])cout<<1<<endl;
		else cout<<0<<endl;
	}
	return 0;
}
