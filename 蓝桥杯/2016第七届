//第一题
/*
#include<cstdio>
using namespace std;
int main()
{
	int cnt = 0;
	for(int a = 1; a <= 9; a++)
	    for(int b = 0; b <= 9; b++)
	    {
	    	if(b * 10 + a + 27 == a * 10 + b)
	    	{
	    		cnt++;
			}
		}
		printf("%d\n",cnt);
	return 0;
} 
//颠倒之后的数字可能出现前导0，注意审题！！ 
*/
/*
//第二题
#include<cstdio>
using namespace std;
int main()
{
	int flag = 0;
	for(int a = 1; ; a++)
	{
		for(int b = 1; b <= 22 ; b++)
		{
			if((a * 2 + b - 1) * b / 2 == 236)
			{
				printf("%d\n",a);
				flag = 1;
				break;
			}
		}
		if(flag)
		break;
	}
	return 0;
}
*/
//26AC一道
//第三题
/*
#include<cstdio>
#include<cmath>
#include<iostream>
using namespace std;
bool j(int a,int b)
{
	if(abs(a - b) == 1)return true;
	else return false;
}
int main()
{
	int cnt = 0;
	for(int a1 = 0; a1 <= 9; a1++)
	   for(int a2 = 0; a2 <= 9; a2++)
	   {
	   	  if(a2 == a1)continue;
	   	  for(int a3 = 0; a3 <= 9; a3++)
	   	  {
	   	  	if(a3 == a1 || a3 == a2)
	   	  	   continue;
	   	  	   for(int a4 = 0; a4 <= 9; a4++)
	   	  	   {
	   	  	   	  if(a4 == a1 || a4 == a2 || a4 == a3)
	   	  	   	     continue;
	   	  	   	   for(int a5 = 0; a5 <= 9; a5++)
	   	  	   	   {
	   	  	   	   	  if(a5 == a1 || a5 == a2 || a5 == a3 || a5 == a4)
	   	  	   	   	     continue;
	   	  	   	   	  for(int a6 = 0; a6 <= 9; a6++)
	   	  	   	   	  {
	   	  	   	   	  	 if(a6 == a1 || a6 == a2 || a6 == a3 || a6 == a4 || a6 == a5)
	   	  	   	   	  	   continue;
	   	  	   	   	  	 for(int a7 = 0; a7 <= 9; a7++)
	   	  	   	   	  	 {
	   	  	   	   	  	 	if(a7 == a1 || a7 == a2 || a7 == a3 || a7 == a4 || a7 == a5 || a7 == a6)
	   	  	   	   	  	 	  continue;
	   	  	   	   	  	 	for(int a8 = 0; a8 <= 9; a8++)
	   	  	   	   	  	 	{
	   	  	   	   	  	 		if(a8 == a1 || a8 == a2 || a8 == a3 || a8 == a4 || a8 == a5 || a8 == a6 || a8 == a7)
	   	  	   	   	  	 		continue;
	   	  	   	   	  	 		for(int a9 = 0; a9 <= 9; a9++)
	   	  	   	   	  	 	{
	   	  	   	   	  	 		if(a9 == a1 || a9 == a2 || a9 == a3 || a9 == a4 || a9 == a5 || a9 == a6 || a9 == a7 || a9 == a8)
	   	  	   	   	  	 		continue;
	   	  	   	   	  	 		for(int a10 = 0; a10 <= 9; a10++)
	   	  	   	   	  	 	{
	   	  	   	   	  	 		if(a10 == a1 || a10 == a2 || a10 == a3 || a10 == a4 || a10 == a5 || a10 == a6 || a10 == a7 || a10 == a8 || a10 == a9)
	   	  	   	   	  	 		continue;
	   	  	   	   	  	 		if(!j(a1,a2) && !j(a1,a5) && !j(a1,a4) && !j(a1,a6) && !j(a2,a3) && !j(a2,a6) && !j(a2,a5) && !j(a2,a7) && !j(a3,a7) && !j(a3,a6) && !j(a4,a5) && !j(a4,a8) && !j(a4,a9) && !j(a5,a6) && !j(a5,a8) && !j(a5,a9) && !j(a5,a10) && !j(a6,a7) && !j(a6,a9) && !j(a6,a10) && !j(a7,a10) && !j(a8,a9) && !j(a9,a10))
	   	  	   	   	  	 		   {
	   	  	   	   	  	 		   	  cnt++;
								   }
	   	  	   	   	  	 		
							}
							}
							}
						 }
					  }
				   }
			   }
		  }
	   }
	   cout<<cnt<<endl;
	return 0;
}
*/
//1580 正解是dfs但是，这种暴力比较好想 AC
/*
#include<cstdio>
#include<cstring>
#include<cmath>
#include<iostream>
using namespace std;
const int INF = 10000;
int a[5][5];
int dir[4][2] = {{0,-1},{-1,-1},{-1,0},{-1,1}};//要判断和之前的位置有没有矛盾，而且是从上到下，从左到右放的，因此只用判断左边，左上，上边，右上即可 
int vis[15];
int ans;
bool judge(int v,int x,int y)
{
	for(int i = 0; i < 4; i++)
	{
		int xx = x + dir[i][0];
		int yy = y + dir[i][1];
		if(xx >= 1 && xx <= 3 && yy >= 1 && yy <= 4)
		{
			if(abs(a[xx][yy] - v) == 1)
		      return false;
		}
	}
	return true;
}
void dfs(int x,int y)
{
	if(x == 3 && y == 4)
	{
		ans++;
		return;
	}
	for(int i = 0; i <= 9; i++)
	{
		if(!vis[i] && judge(i,x,y))
		{
			vis[i] = 1;
			a[x][y]= i;
			if(y == 4)dfs(x + 1,1);
			else dfs(x,y + 1);
			vis[i] = 0;
			a[x][y] = -INF;
		}
	}
}
int main()
{
    for(int i = 1; i <= 3; i++)
        for(int j = 1; j <= 4; j++)
           a[i][j] = -INF;
	memset(vis,0,sizeof(vis));
	dfs(1,2);
	cout<<ans<<endl;
	return 0;
}*/
//这种dfs是类似于递归每一个位置，判断位置符不符合，比赛的时候还是用最简单最暴力的方法吧哈哈哈
//第四题
/*
#include <stdio.h>

void swap(int a[], int i, int j)
{
    int t = a[i];
    a[i] = a[j];
    a[j] = t;
}

int partition(int a[], int p, int r)
{
    int i = p;
    int j = r + 1;
    int x = a[p];
    while(1){
        while(i<r && a[++i]<x);
        while(a[--j]>x);
        if(i>=j) break;
        swap(a,i,j);
    }
    swap(a,p,j);//填空 
    return j;
}

void quicksort(int a[], int p, int r)
{
    if(p<r){
        int q = partition(a,p,r);
        quicksort(a,p,q-1);
        quicksort(a,q+1,r);
    }
}

int main()
{
    int i;
    int a[] = {5,13,6,24,2,8,19,27,6,12,1,17};
    int N = 12;

    quicksort(a, 0, N-1);

    for(i=0; i<N; i++) printf("%d ", a[i]);
    printf("\n");
    return 0;
} 
//虽然不会但是蒙对了哈哈哈，比赛的时候要敢于尝试 swap(a,p,j); AC
*/
//第五题
//没做出来，不过也算开阔思路了吧
/* 
#include <stdio.h>

void f(int x) 
{  
    int i; 
    for(i=0; i<32; i++) printf("%d", (x>>(31-i))&1);  
    printf("   ");

    x = x & (x + 1);   

    for(i=0; i<32; i++) printf("%d", (x>>(31-i))&1);  
    printf("\n");  
}

int main() 
{ 
    f(103);  
    f(12);  
    return 0; 
}*/
/*
#include<cstdio>
#include<iostream>
using namespace std;
int ans[15],vis[15];
const int INF = 10000;
int cnt;
void dfs(int d)
{
	if(d == 4)
	{
		if(ans[1] + ans[2] != ans[3])
		   return;
	}
	if(d == 7)
	{
		if(ans[4] - ans[5] != ans[6])
		  return ;
	}
	if(d == 10)
	{
		if(ans[7] * ans[8] != ans[9])
		  return;
	}
	if(d == 13)
	{
		if(ans[11] * ans[12] != ans[10])
		  return;
		else 
		cnt++;
	}
	for(int i = 1; i <= 13; i++)
	{
		if(!vis[i])
		{
			vis[i] = 1;
			ans[d] = i;
			dfs(d + 1);
			vis[i] = 0;
			ans[d] = -INF;
		}
	}
}
int main()
{
	dfs(1);
	cout<<cnt<<endl;
	return 0;
}
//64这道题自己没想出来不超时的方法，实际上在不同的算式的时候加上一个剪枝即可QWQ
 */
//第七题 QWQ这道题要是在考场肯定挂了  又是一道DFS暴搜的题目，首先枚举所有可能的五个格子，注意这里有坑，相当于组合问题
//但是之前走过的在下一个从新开始的时候不能再走之前走过的节点了，所以需要记录上一个走过的节点
//还有一个坑就是走了五步的时候判断是否是联通的时候，不是五个答案的四个方向有就行，而是必须得联通，这里又一个搜索，四个方向
//遇到0就返回，遇到1就去标记然后继续找，注意该层返回的时候加上分树根1，而且由于在一开始搜索的时候mp是保存的走过的节点位置
//之后搜索还用到，所以不能改变mp的值只能重新开数组 
/* 
#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;
const int INF = 100000;
int ans[20],vis[20],used[20][20];
int dir[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};
int mp[20][20];
int get_sum(int x,int y)
{
	if(used[x][y] == 0)return 0;
	used[x][y] = 0;
	int sum = 0;
	for(int i = 0; i < 4; i++)
	{
		int xx = x + dir[i][0];
		int yy = y + dir[i][1];
		sum += get_sum(xx,yy);
	}
	return sum + 1;
}
int cnt = 0;
void dfs(int d,int last)
{
	if(d == 5)
	{
		int x,y;
		if(last % 4 == 0)
			{
			   x = last / 4;
			   y = 4;	
			}
			else 
			{
				x = last / 4 + 1;
				y = last % 4;
			}
		for(int i = 1; i <= 3; i++)
		    for(int j = 1; j <= 4; j++)
		        used[i][j] = mp[i][j];
		if(get_sum(x,y) == 5)
		{
		   cnt++;
		}
		return;
	}
	int x,y;
	for(int i = last + 1; i <= 12; i++)
	{
		if(!vis[i])
		{
			if(i % 4 == 0)
			{
			   x = i / 4;
			   y = 4;	
			}
			else 
			{
				x = i / 4 + 1;
				y = i % 4;
			}
			vis[i] = 1;
			mp[x][y] = 1;
			dfs(d + 1,i);
			vis[i] = 0;
			mp[x][y] = 0;
		}
	}
}
int main()
{
	freopen("input.txt","w",stdout);
	memset(mp,0,sizeof(mp));
	dfs(0,0);
	cout<<cnt<<endl;
	return 0;
}
 */
//第八题
//这道题虽然暴力，但是也不能太暴力呀2333，又练习了一遍对拍
/*
#include<cstdio>
#include<cstring>
#include<iostream>
#include<cstdlib> 
#include<ctime>
#include<cmath>
using namespace std;
int main()
{
//	freopen("data.txt","w",stdout);
//	srand(time(NULL));
//	int m = 100;
//	while(m--)
//	{
//		printf("%d\n",rand());
//	}
	//freopen("data.txt","r",stdin);
	//freopen("out1.txt","w",stdout);
	int n;
	
	cin>>n;
		int a,b,c,d;
		int flag = 0;
	for(a = 0;a <= sqrt(n); a++)
	{
		int n1 = n - a * a;
		for(b = 0;b <= sqrt(n1); b++)
		{
			int n2 = n1 - b * b;
			for(c = 0;c <= sqrt(n2); c++)
			{
				int n3 = n2 - c * c;
			    for(int d = 0;d <= sqrt(n3) ; d++)
			    {
			    	if(d * d == n3)
			    	{
			    		printf("%d %d %d %d\n",a,b,c,d);
			    		flag = 1;
			    		break;
					}
				}
				if(flag)break;
			}
			if(flag)break;
		}
		if(flag)break;
      } 
	
	return 0;
} 
*/
//第九题LCS变形 找到最长的回文串，剩下的就是不行的
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
using namespace std;
char s1[1010],s2[1010];
int dp[1010][1010];
int main()
{
	scanf("%s",s1 + 1);
	int len = strlen(s1 + 1);
	strcpy(s2 + 1,s1 + 1);
	reverse(s2 + 1, s2 + len + 1);
	for(int i = 1; i <= len; i++)
	    for(int j = 1; j <= len; j++)
	    {
	    	if(s1[i] == s2[j])
	    	dp[i][j] = dp[i - 1][j - 1] + 1;
	    	else 
	    	dp[i][j] = max(dp[i - 1][j],dp[i][j - 1]);
		}
	cout<<len - dp[len][len]<<endl;
	return 0;
 } 
